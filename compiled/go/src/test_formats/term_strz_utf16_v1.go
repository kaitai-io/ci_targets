// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"golang.org/x/text/encoding/unicode"
)

type TermStrzUtf16V1 struct {
	S1 string
	S2 string
	Term uint16
	S3 string
	_io *kaitai.Stream
	_root *TermStrzUtf16V1
	_parent kaitai.Struct
}
func NewTermStrzUtf16V1() *TermStrzUtf16V1 {
	return &TermStrzUtf16V1{
	}
}

func (this TermStrzUtf16V1) IO_() *kaitai.Stream {
	return this._io
}

func (this *TermStrzUtf16V1) Read(io *kaitai.Stream, parent kaitai.Struct, root *TermStrzUtf16V1) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytesTermMulti([]uint8{0, 0}, false, true, true)
	if err != nil {
		return err
	}
	tmp2, err := kaitai.BytesToStr(tmp1, unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return err
	}
	this.S1 = tmp2
	tmp3, err := this._io.ReadBytesTermMulti([]uint8{0, 0}, false, false, true)
	if err != nil {
		return err
	}
	tmp4, err := kaitai.BytesToStr(tmp3, unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return err
	}
	this.S2 = tmp4
	tmp5, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Term = uint16(tmp5)
	tmp6, err := this._io.ReadBytesTermMulti([]uint8{0, 0}, true, true, true)
	if err != nil {
		return err
	}
	tmp7, err := kaitai.BytesToStr(tmp6, unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return err
	}
	this.S3 = tmp7
	return err
}
