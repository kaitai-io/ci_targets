// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
)

type ProcessRepeatUsertypeDynargXor struct {
	Blocks []*ProcessRepeatUsertypeDynargXor_Block
	BlocksB *ProcessRepeatUsertypeDynargXor_BlocksBWrapper
	_io *kaitai.Stream
	_root *ProcessRepeatUsertypeDynargXor
	_parent kaitai.Struct
	_raw_Blocks [][]byte
	_raw__raw_Blocks [][]byte
}
func NewProcessRepeatUsertypeDynargXor() *ProcessRepeatUsertypeDynargXor {
	return &ProcessRepeatUsertypeDynargXor{
	}
}

func (this ProcessRepeatUsertypeDynargXor) IO_() *kaitai.Stream {
	return this._io
}

func (this *ProcessRepeatUsertypeDynargXor) Read(io *kaitai.Stream, parent kaitai.Struct, root *ProcessRepeatUsertypeDynargXor) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(2); i++ {
		_ = i
		tmp1, err := this._io.ReadBytes(int(5))
		if err != nil {
			return err
		}
		tmp1 = tmp1
		this._raw__raw_Blocks = append(this._raw__raw_Blocks, tmp1)
		tmp2, err := this._io.Pos()
		if err != nil {
			return err
		}
		this._raw_Blocks = append(this._raw_Blocks, kaitai.ProcessXOR(this._raw__raw_Blocks[i], []byte{155 ^ (i << 4 | tmp2)}))
		_io__raw_Blocks := kaitai.NewStream(bytes.NewReader(this._raw_Blocks[i]))
		tmp3 := NewProcessRepeatUsertypeDynargXor_Block()
		err = tmp3.Read(_io__raw_Blocks, this, this._root)
		if err != nil {
			return err
		}
		this.Blocks = append(this.Blocks, tmp3)
	}
	tmp4 := NewProcessRepeatUsertypeDynargXor_BlocksBWrapper()
	err = tmp4.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.BlocksB = tmp4
	return err
}
type ProcessRepeatUsertypeDynargXor_Block struct {
	A uint32
	_io *kaitai.Stream
	_root *ProcessRepeatUsertypeDynargXor
	_parent *ProcessRepeatUsertypeDynargXor
}
func NewProcessRepeatUsertypeDynargXor_Block() *ProcessRepeatUsertypeDynargXor_Block {
	return &ProcessRepeatUsertypeDynargXor_Block{
	}
}

func (this ProcessRepeatUsertypeDynargXor_Block) IO_() *kaitai.Stream {
	return this._io
}

func (this *ProcessRepeatUsertypeDynargXor_Block) Read(io *kaitai.Stream, parent *ProcessRepeatUsertypeDynargXor, root *ProcessRepeatUsertypeDynargXor) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.A = uint32(tmp5)
	return err
}
type ProcessRepeatUsertypeDynargXor_BlocksBWrapper struct {
	Dummy uint8
	_io *kaitai.Stream
	_root *ProcessRepeatUsertypeDynargXor
	_parent *ProcessRepeatUsertypeDynargXor
	_f_blocks0B bool
	blocks0B uint8
	_f_blocks1B bool
	blocks1B uint8
}
func NewProcessRepeatUsertypeDynargXor_BlocksBWrapper() *ProcessRepeatUsertypeDynargXor_BlocksBWrapper {
	return &ProcessRepeatUsertypeDynargXor_BlocksBWrapper{
	}
}

func (this ProcessRepeatUsertypeDynargXor_BlocksBWrapper) IO_() *kaitai.Stream {
	return this._io
}

func (this *ProcessRepeatUsertypeDynargXor_BlocksBWrapper) Read(io *kaitai.Stream, parent *ProcessRepeatUsertypeDynargXor, root *ProcessRepeatUsertypeDynargXor) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Dummy = tmp6
	return err
}
func (this *ProcessRepeatUsertypeDynargXor_BlocksBWrapper) Blocks0B() (v uint8, err error) {
	if (this._f_blocks0B) {
		return this.blocks0B, nil
	}
	this._f_blocks0B = true
	thisIo := this._parent.Blocks[0]._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return 0, err
	}
	_, err = thisIo.Seek(int64(4), io.SeekStart)
	if err != nil {
		return 0, err
	}
	tmp7, err := thisIo.ReadU1()
	if err != nil {
		return 0, err
	}
	this.blocks0B = tmp7
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return 0, err
	}
	return this.blocks0B, nil
}
func (this *ProcessRepeatUsertypeDynargXor_BlocksBWrapper) Blocks1B() (v uint8, err error) {
	if (this._f_blocks1B) {
		return this.blocks1B, nil
	}
	this._f_blocks1B = true
	thisIo := this._parent.Blocks[1]._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return 0, err
	}
	_, err = thisIo.Seek(int64(4), io.SeekStart)
	if err != nil {
		return 0, err
	}
	tmp8, err := thisIo.ReadU1()
	if err != nil {
		return 0, err
	}
	this.blocks1B = tmp8
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return 0, err
	}
	return this.blocks1B, nil
}
