// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"


/**
 * A variable-length unsigned/signed integer using base128 encoding. 1-byte groups
 * consist of 1-bit flag of continuation and 7-bit value chunk, and are ordered
 * "least significant group first", i.e. in "little-endian" manner.
 * 
 * This particular encoding is specified and used in:
 * 
 * * DWARF debug file format, where it's dubbed "unsigned LEB128" or "ULEB128".
 *   <https://dwarfstd.org/doc/dwarf-2.0.0.pdf> - page 139
 * * Google Protocol Buffers, where it's called "Base 128 Varints".
 *   <https://protobuf.dev/programming-guides/encoding/#varints>
 * * Apache Lucene, where it's called "VInt"
 *   <https://lucene.apache.org/core/3_5_0/fileformats.html#VInt>
 * * Apache Avro uses this as a basis for integer encoding, adding ZigZag on
 *   top of it for signed ints
 *   <https://avro.apache.org/docs/current/spec.html#binary_encode_primitive>
 * 
 * More information on this encoding is available at <https://en.wikipedia.org/wiki/LEB128>
 * 
 * This particular implementation supports serialized values to up 8 bytes long.
 */
type VlqBase128Le struct {
	Groups []*VlqBase128Le_Group
	_io *kaitai.Stream
	_root *VlqBase128Le
	_parent kaitai.Struct
	_f_len bool
	len int
	_f_signBit bool
	signBit uint64
	_f_value bool
	value uint64
	_f_valueSigned bool
	valueSigned int64
}
func NewVlqBase128Le() *VlqBase128Le {
	return &VlqBase128Le{
	}
}

func (this VlqBase128Le) IO_() *kaitai.Stream {
	return this._io
}

func (this *VlqBase128Le) Read(io *kaitai.Stream, parent kaitai.Struct, root *VlqBase128Le) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp1 := NewVlqBase128Le_Group()
		err = tmp1.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		_it := tmp1
		this.Groups = append(this.Groups, _it)
		if !(_it.HasNext) {
			break
		}
	}
	return err
}
func (this *VlqBase128Le) Len() (v int, err error) {
	if (this._f_len) {
		return this.len, nil
	}
	this._f_len = true
	this.len = int(len(this.Groups))
	return this.len, nil
}
func (this *VlqBase128Le) SignBit() (v uint64, err error) {
	if (this._f_signBit) {
		return this.signBit, nil
	}
	this._f_signBit = true
	tmp2, err := this.Len()
	if err != nil {
		return 0, err
	}
	this.signBit = uint64(uint64(uint64(1) << (7 * tmp2 - 1)))
	return this.signBit, nil
}

/**
 * Resulting unsigned value as normal integer
 */
func (this *VlqBase128Le) Value() (v uint64, err error) {
	if (this._f_value) {
		return this.value, nil
	}
	this._f_value = true
	var tmp3 int;
	tmp4, err := this.Len()
	if err != nil {
		return 0, err
	}
	if (tmp4 >= 2) {
		tmp3 = this.Groups[1].Value << 7
	} else {
		tmp3 = 0
	}
	var tmp5 int;
	tmp6, err := this.Len()
	if err != nil {
		return 0, err
	}
	if (tmp6 >= 3) {
		tmp5 = this.Groups[2].Value << 14
	} else {
		tmp5 = 0
	}
	var tmp7 int;
	tmp8, err := this.Len()
	if err != nil {
		return 0, err
	}
	if (tmp8 >= 4) {
		tmp7 = this.Groups[3].Value << 21
	} else {
		tmp7 = 0
	}
	var tmp9 int;
	tmp10, err := this.Len()
	if err != nil {
		return 0, err
	}
	if (tmp10 >= 5) {
		tmp9 = this.Groups[4].Value << 28
	} else {
		tmp9 = 0
	}
	var tmp11 int;
	tmp12, err := this.Len()
	if err != nil {
		return 0, err
	}
	if (tmp12 >= 6) {
		tmp11 = this.Groups[5].Value << 35
	} else {
		tmp11 = 0
	}
	var tmp13 int;
	tmp14, err := this.Len()
	if err != nil {
		return 0, err
	}
	if (tmp14 >= 7) {
		tmp13 = this.Groups[6].Value << 42
	} else {
		tmp13 = 0
	}
	var tmp15 int;
	tmp16, err := this.Len()
	if err != nil {
		return 0, err
	}
	if (tmp16 >= 8) {
		tmp15 = this.Groups[7].Value << 49
	} else {
		tmp15 = 0
	}
	this.value = uint64(uint64(((((((this.Groups[0].Value + tmp3) + tmp5) + tmp7) + tmp9) + tmp11) + tmp13) + tmp15))
	return this.value, nil
}

/**
 * @see <a href="https://graphics.stanford.edu/~seander/bithacks.html#VariableSignExtend">Source</a>
 */
func (this *VlqBase128Le) ValueSigned() (v int64, err error) {
	if (this._f_valueSigned) {
		return this.valueSigned, nil
	}
	this._f_valueSigned = true
	tmp17, err := this.Value()
	if err != nil {
		return 0, err
	}
	tmp18, err := this.SignBit()
	if err != nil {
		return 0, err
	}
	tmp19, err := this.SignBit()
	if err != nil {
		return 0, err
	}
	this.valueSigned = int64(int64(int64(tmp17 ^ tmp18) - int64(tmp19)))
	return this.valueSigned, nil
}

/**
 * One byte group, clearly divided into 7-bit "value" chunk and 1-bit "continuation" flag.
 */
type VlqBase128Le_Group struct {
	HasNext bool
	Value uint64
	_io *kaitai.Stream
	_root *VlqBase128Le
	_parent *VlqBase128Le
}
func NewVlqBase128Le_Group() *VlqBase128Le_Group {
	return &VlqBase128Le_Group{
	}
}

func (this VlqBase128Le_Group) IO_() *kaitai.Stream {
	return this._io
}

func (this *VlqBase128Le_Group) Read(io *kaitai.Stream, parent *VlqBase128Le, root *VlqBase128Le) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp20, err := this._io.ReadBitsIntBe(1)
	if err != nil {
		return err
	}
	this.HasNext = tmp20 != 0
	tmp21, err := this._io.ReadBitsIntBe(7)
	if err != nil {
		return err
	}
	this.Value = tmp21
	return err
}

/**
 * If true, then we have more bytes to read
 */

/**
 * The 7-bit (base128) numeric value chunk of this group
 */
