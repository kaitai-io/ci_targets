// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)

type ExprIoTernary struct {
	Flag uint8
	Obj1 *ExprIoTernary_One
	Obj2 *ExprIoTernary_Two
	_io *kaitai.Stream
	_root *ExprIoTernary
	_parent kaitai.Struct
	_raw_Obj1 []byte
	_raw_Obj2 []byte
	_f_oneOrTwoIo bool
	oneOrTwoIo *kaitai.Stream
	_f_oneOrTwoIoSize1 bool
	oneOrTwoIoSize1 int
	_f_oneOrTwoIoSize2 bool
	oneOrTwoIoSize2 int
	_f_oneOrTwoIoSizeAdd3 bool
	oneOrTwoIoSizeAdd3 int
	_f_oneOrTwoObj bool
	oneOrTwoObj kaitai.Struct
}
func NewExprIoTernary() *ExprIoTernary {
	return &ExprIoTernary{
	}
}

func (this ExprIoTernary) IO_() *kaitai.Stream {
	return this._io
}

func (this *ExprIoTernary) Read(io *kaitai.Stream, parent kaitai.Struct, root *ExprIoTernary) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Flag = tmp1
	tmp2, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this._raw_Obj1 = tmp2
	_io__raw_Obj1 := kaitai.NewStream(bytes.NewReader(this._raw_Obj1))
	tmp3 := NewExprIoTernary_One()
	err = tmp3.Read(_io__raw_Obj1, this, this._root)
	if err != nil {
		return err
	}
	this.Obj1 = tmp3
	tmp4, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp4 = tmp4
	this._raw_Obj2 = tmp4
	_io__raw_Obj2 := kaitai.NewStream(bytes.NewReader(this._raw_Obj2))
	tmp5 := NewExprIoTernary_Two()
	err = tmp5.Read(_io__raw_Obj2, this, this._root)
	if err != nil {
		return err
	}
	this.Obj2 = tmp5
	return err
}
func (this *ExprIoTernary) OneOrTwoIo() (v *kaitai.Stream, err error) {
	if (this._f_oneOrTwoIo) {
		return this.oneOrTwoIo, nil
	}
	this._f_oneOrTwoIo = true
	var tmp6 *ExprIoTernary_One;
	if (this.Flag == 64) {
		tmp6 = this.Obj1
	} else {
		tmp6 = this.Obj2
	}
	this.oneOrTwoIo = *kaitai.Stream(tmp6._io)
	return this.oneOrTwoIo, nil
}
func (this *ExprIoTernary) OneOrTwoIoSize1() (v int, err error) {
	if (this._f_oneOrTwoIoSize1) {
		return this.oneOrTwoIoSize1, nil
	}
	this._f_oneOrTwoIoSize1 = true
	var tmp7 *ExprIoTernary_One;
	if (this.Flag == 64) {
		tmp7 = this.Obj1
	} else {
		tmp7 = this.Obj2
	}
	tmp8, err := tmp7._io.Size()
	if err != nil {
		return 0, err
	}
	this.oneOrTwoIoSize1 = int(tmp8)
	return this.oneOrTwoIoSize1, nil
}
func (this *ExprIoTernary) OneOrTwoIoSize2() (v int, err error) {
	if (this._f_oneOrTwoIoSize2) {
		return this.oneOrTwoIoSize2, nil
	}
	this._f_oneOrTwoIoSize2 = true
	tmp9, err := this.OneOrTwoIo()
	if err != nil {
		return 0, err
	}
	tmp10, err := tmp9.Size()
	if err != nil {
		return 0, err
	}
	this.oneOrTwoIoSize2 = int(tmp10)
	return this.oneOrTwoIoSize2, nil
}
func (this *ExprIoTernary) OneOrTwoIoSizeAdd3() (v int, err error) {
	if (this._f_oneOrTwoIoSizeAdd3) {
		return this.oneOrTwoIoSizeAdd3, nil
	}
	this._f_oneOrTwoIoSizeAdd3 = true
	var tmp11 *ExprIoTernary_One;
	if (this.Flag == 64) {
		tmp11 = this.Obj1
	} else {
		tmp11 = this.Obj2
	}
	tmp12, err := tmp11._io.Size()
	if err != nil {
		return 0, err
	}
	this.oneOrTwoIoSizeAdd3 = int(tmp12 + 3)
	return this.oneOrTwoIoSizeAdd3, nil
}
func (this *ExprIoTernary) OneOrTwoObj() (v kaitai.Struct, err error) {
	if (this._f_oneOrTwoObj) {
		return this.oneOrTwoObj, nil
	}
	this._f_oneOrTwoObj = true
	var tmp13 *ExprIoTernary_One;
	if (this.Flag == 64) {
		tmp13 = this.Obj1
	} else {
		tmp13 = this.Obj2
	}
	this.oneOrTwoObj = kaitai.Struct(tmp13)
	return this.oneOrTwoObj, nil
}
type ExprIoTernary_One struct {
	One uint8
	_io *kaitai.Stream
	_root *ExprIoTernary
	_parent *ExprIoTernary
}
func NewExprIoTernary_One() *ExprIoTernary_One {
	return &ExprIoTernary_One{
	}
}

func (this ExprIoTernary_One) IO_() *kaitai.Stream {
	return this._io
}

func (this *ExprIoTernary_One) Read(io *kaitai.Stream, parent *ExprIoTernary, root *ExprIoTernary) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp14, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.One = tmp14
	return err
}
type ExprIoTernary_Two struct {
	Two uint8
	_io *kaitai.Stream
	_root *ExprIoTernary
	_parent *ExprIoTernary
}
func NewExprIoTernary_Two() *ExprIoTernary_Two {
	return &ExprIoTernary_Two{
	}
}

func (this ExprIoTernary_Two) IO_() *kaitai.Stream {
	return this._io
}

func (this *ExprIoTernary_Two) Read(io *kaitai.Stream, parent *ExprIoTernary, root *ExprIoTernary) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp15, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Two = tmp15
	return err
}
