// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type RepeatNStruct struct {
	Qty uint32
	Chunks []*RepeatNStruct_Chunk
	_io *kaitai.Stream
	_root *RepeatNStruct
	_parent kaitai.Struct
}
func NewRepeatNStruct() *RepeatNStruct {
	return &RepeatNStruct{
	}
}

func (this RepeatNStruct) IO_() *kaitai.Stream {
	return this._io
}

func (this *RepeatNStruct) Read(io *kaitai.Stream, parent kaitai.Struct, root *RepeatNStruct) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Qty = uint32(tmp1)
	for i := 0; i < int(this.Qty); i++ {
		_ = i
		tmp2 := NewRepeatNStruct_Chunk()
		err = tmp2.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Chunks = append(this.Chunks, tmp2)
	}
	return err
}
type RepeatNStruct_Chunk struct {
	Offset uint32
	Len uint32
	_io *kaitai.Stream
	_root *RepeatNStruct
	_parent *RepeatNStruct
}
func NewRepeatNStruct_Chunk() *RepeatNStruct_Chunk {
	return &RepeatNStruct_Chunk{
	}
}

func (this RepeatNStruct_Chunk) IO_() *kaitai.Stream {
	return this._io
}

func (this *RepeatNStruct_Chunk) Read(io *kaitai.Stream, parent *RepeatNStruct, root *RepeatNStruct) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp3, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Offset = uint32(tmp3)
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Len = uint32(tmp4)
	return err
}
