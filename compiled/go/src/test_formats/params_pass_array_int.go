// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type ParamsPassArrayInt struct {
	Ints []uint16
	PassInts *ParamsPassArrayInt_WantsInts
	PassIntsCalc *ParamsPassArrayInt_WantsInts
	_io *kaitai.Stream
	_root *ParamsPassArrayInt
	_parent kaitai.Struct
	_f_intsCalc bool
	intsCalc []uint16
}
func NewParamsPassArrayInt() *ParamsPassArrayInt {
	return &ParamsPassArrayInt{
	}
}

func (this ParamsPassArrayInt) IO_() *kaitai.Stream {
	return this._io
}

func (this *ParamsPassArrayInt) Read(io *kaitai.Stream, parent kaitai.Struct, root *ParamsPassArrayInt) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 0; i < int(3); i++ {
		_ = i
		tmp1, err := this._io.ReadU2le()
		if err != nil {
			return err
		}
		this.Ints = append(this.Ints, tmp1)
	}
	tmp2 := NewParamsPassArrayInt_WantsInts(this.Ints)
	err = tmp2.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.PassInts = tmp2
	tmp4, err := this.IntsCalc()
	if err != nil {
		return err
	}
	tmp3 := NewParamsPassArrayInt_WantsInts(tmp4)
	err = tmp3.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.PassIntsCalc = tmp3
	return err
}
func (this *ParamsPassArrayInt) IntsCalc() (v []uint16, err error) {
	if (this._f_intsCalc) {
		return this.intsCalc, nil
	}
	this.intsCalc = []uint16([]uint16{27643, 7})
	this._f_intsCalc = true
	return this.intsCalc, nil
}
type ParamsPassArrayInt_WantsInts struct {
	Nums []uint16
	_io *kaitai.Stream
	_root *ParamsPassArrayInt
	_parent *ParamsPassArrayInt
}
func NewParamsPassArrayInt_WantsInts(nums []uint16) *ParamsPassArrayInt_WantsInts {
	return &ParamsPassArrayInt_WantsInts{
		Nums: nums,
	}
}

func (this ParamsPassArrayInt_WantsInts) IO_() *kaitai.Stream {
	return this._io
}

func (this *ParamsPassArrayInt_WantsInts) Read(io *kaitai.Stream, parent *ParamsPassArrayInt, root *ParamsPassArrayInt) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
