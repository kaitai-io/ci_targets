// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)

type ProcessStructPadTerm struct {
	StrPad *ProcessStructPadTerm_BytesWrapper
	StrTerm *ProcessStructPadTerm_BytesWrapper
	StrTermAndPad *ProcessStructPadTerm_BytesWrapper
	StrTermInclude *ProcessStructPadTerm_BytesWrapper
	_io *kaitai.Stream
	_root *ProcessStructPadTerm
	_parent kaitai.Struct
	_raw_StrPad []byte
	_raw__raw_StrPad []byte
	_raw_StrTerm []byte
	_raw__raw_StrTerm []byte
	_raw_StrTermAndPad []byte
	_raw__raw_StrTermAndPad []byte
	_raw_StrTermInclude []byte
	_raw__raw_StrTermInclude []byte
}
func NewProcessStructPadTerm() *ProcessStructPadTerm {
	return &ProcessStructPadTerm{
	}
}

func (this ProcessStructPadTerm) IO_() *kaitai.Stream {
	return this._io
}

func (this *ProcessStructPadTerm) Read(io *kaitai.Stream, parent kaitai.Struct, root *ProcessStructPadTerm) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(20))
	if err != nil {
		return err
	}
	tmp1 = kaitai.BytesStripRight(tmp1, 64)
	this._raw__raw_StrPad = tmp1
	this._raw_StrPad = kaitai.ProcessXOR(this._raw__raw_StrPad, []byte{21})
	_io__raw_StrPad := kaitai.NewStream(bytes.NewReader(this._raw_StrPad))
	tmp2 := NewProcessStructPadTerm_BytesWrapper()
	err = tmp2.Read(_io__raw_StrPad, this, this._root)
	if err != nil {
		return err
	}
	this.StrPad = tmp2
	tmp3, err := this._io.ReadBytes(int(20))
	if err != nil {
		return err
	}
	tmp3 = kaitai.BytesTerminate(tmp3, 64, false)
	this._raw__raw_StrTerm = tmp3
	this._raw_StrTerm = kaitai.ProcessXOR(this._raw__raw_StrTerm, []byte{21})
	_io__raw_StrTerm := kaitai.NewStream(bytes.NewReader(this._raw_StrTerm))
	tmp4 := NewProcessStructPadTerm_BytesWrapper()
	err = tmp4.Read(_io__raw_StrTerm, this, this._root)
	if err != nil {
		return err
	}
	this.StrTerm = tmp4
	tmp5, err := this._io.ReadBytes(int(20))
	if err != nil {
		return err
	}
	tmp5 = kaitai.BytesTerminate(kaitai.BytesStripRight(tmp5, 43), 64, false)
	this._raw__raw_StrTermAndPad = tmp5
	this._raw_StrTermAndPad = kaitai.ProcessXOR(this._raw__raw_StrTermAndPad, []byte{21})
	_io__raw_StrTermAndPad := kaitai.NewStream(bytes.NewReader(this._raw_StrTermAndPad))
	tmp6 := NewProcessStructPadTerm_BytesWrapper()
	err = tmp6.Read(_io__raw_StrTermAndPad, this, this._root)
	if err != nil {
		return err
	}
	this.StrTermAndPad = tmp6
	tmp7, err := this._io.ReadBytes(int(20))
	if err != nil {
		return err
	}
	tmp7 = kaitai.BytesTerminate(tmp7, 64, true)
	this._raw__raw_StrTermInclude = tmp7
	this._raw_StrTermInclude = kaitai.ProcessXOR(this._raw__raw_StrTermInclude, []byte{21})
	_io__raw_StrTermInclude := kaitai.NewStream(bytes.NewReader(this._raw_StrTermInclude))
	tmp8 := NewProcessStructPadTerm_BytesWrapper()
	err = tmp8.Read(_io__raw_StrTermInclude, this, this._root)
	if err != nil {
		return err
	}
	this.StrTermInclude = tmp8
	return err
}
type ProcessStructPadTerm_BytesWrapper struct {
	Value []byte
	_io *kaitai.Stream
	_root *ProcessStructPadTerm
	_parent *ProcessStructPadTerm
}
func NewProcessStructPadTerm_BytesWrapper() *ProcessStructPadTerm_BytesWrapper {
	return &ProcessStructPadTerm_BytesWrapper{
	}
}

func (this ProcessStructPadTerm_BytesWrapper) IO_() *kaitai.Stream {
	return this._io
}

func (this *ProcessStructPadTerm_BytesWrapper) Read(io *kaitai.Stream, parent *ProcessStructPadTerm, root *ProcessStructPadTerm) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp9, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp9 = tmp9
	this.Value = tmp9
	return err
}
