// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type ExprIfIntEq struct {
	Skip []byte
	Seq int16
	SeqIf int16
	_io *kaitai.Stream
	_root *ExprIfIntEq
	_parent kaitai.Struct
	_f_calc bool
	calc int
	_f_calcEqCalcIf bool
	calcEqCalcIf bool
	_f_calcEqLit bool
	calcEqLit bool
	_f_calcEqSeqIf bool
	calcEqSeqIf bool
	_f_calcIf bool
	calcIf int
	_f_calcIfEqLit bool
	calcIfEqLit bool
	_f_calcIfEqSeqIf bool
	calcIfEqSeqIf bool
	_f_seqEqCalc bool
	seqEqCalc bool
	_f_seqEqCalcIf bool
	seqEqCalcIf bool
	_f_seqEqLit bool
	seqEqLit bool
	_f_seqEqSeqIf bool
	seqEqSeqIf bool
	_f_seqIfEqLit bool
	seqIfEqLit bool
}
func NewExprIfIntEq() *ExprIfIntEq {
	return &ExprIfIntEq{
	}
}

func (this ExprIfIntEq) IO_() *kaitai.Stream {
	return this._io
}

func (this *ExprIfIntEq) Read(io *kaitai.Stream, parent kaitai.Struct, root *ExprIfIntEq) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(2))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this.Skip = tmp1
	tmp2, err := this._io.ReadS2le()
	if err != nil {
		return err
	}
	this.Seq = int16(tmp2)
	if (true) {
		tmp3, err := this._io.ReadS2le()
		if err != nil {
			return err
		}
		this.SeqIf = int16(tmp3)
	}
	return err
}
func (this *ExprIfIntEq) Calc() (v int, err error) {
	if (this._f_calc) {
		return this.calc, nil
	}
	this._f_calc = true
	this.calc = int(16705)
	return this.calc, nil
}
func (this *ExprIfIntEq) CalcEqCalcIf() (v bool, err error) {
	if (this._f_calcEqCalcIf) {
		return this.calcEqCalcIf, nil
	}
	this._f_calcEqCalcIf = true
	tmp4, err := this.Calc()
	if err != nil {
		return false, err
	}
	tmp5, err := this.CalcIf()
	if err != nil {
		return false, err
	}
	this.calcEqCalcIf = bool(tmp4 == tmp5)
	return this.calcEqCalcIf, nil
}
func (this *ExprIfIntEq) CalcEqLit() (v bool, err error) {
	if (this._f_calcEqLit) {
		return this.calcEqLit, nil
	}
	this._f_calcEqLit = true
	tmp6, err := this.Calc()
	if err != nil {
		return false, err
	}
	this.calcEqLit = bool(tmp6 == 16705)
	return this.calcEqLit, nil
}
func (this *ExprIfIntEq) CalcEqSeqIf() (v bool, err error) {
	if (this._f_calcEqSeqIf) {
		return this.calcEqSeqIf, nil
	}
	this._f_calcEqSeqIf = true
	tmp7, err := this.Calc()
	if err != nil {
		return false, err
	}
	this.calcEqSeqIf = bool(tmp7 == this.SeqIf)
	return this.calcEqSeqIf, nil
}
func (this *ExprIfIntEq) CalcIf() (v int, err error) {
	if (this._f_calcIf) {
		return this.calcIf, nil
	}
	this._f_calcIf = true
	if (true) {
		this.calcIf = int(16705)
	}
	return this.calcIf, nil
}
func (this *ExprIfIntEq) CalcIfEqLit() (v bool, err error) {
	if (this._f_calcIfEqLit) {
		return this.calcIfEqLit, nil
	}
	this._f_calcIfEqLit = true
	tmp8, err := this.CalcIf()
	if err != nil {
		return false, err
	}
	this.calcIfEqLit = bool(tmp8 == 16705)
	return this.calcIfEqLit, nil
}
func (this *ExprIfIntEq) CalcIfEqSeqIf() (v bool, err error) {
	if (this._f_calcIfEqSeqIf) {
		return this.calcIfEqSeqIf, nil
	}
	this._f_calcIfEqSeqIf = true
	tmp9, err := this.CalcIf()
	if err != nil {
		return false, err
	}
	this.calcIfEqSeqIf = bool(tmp9 == this.SeqIf)
	return this.calcIfEqSeqIf, nil
}
func (this *ExprIfIntEq) SeqEqCalc() (v bool, err error) {
	if (this._f_seqEqCalc) {
		return this.seqEqCalc, nil
	}
	this._f_seqEqCalc = true
	tmp10, err := this.Calc()
	if err != nil {
		return false, err
	}
	this.seqEqCalc = bool(this.Seq == tmp10)
	return this.seqEqCalc, nil
}
func (this *ExprIfIntEq) SeqEqCalcIf() (v bool, err error) {
	if (this._f_seqEqCalcIf) {
		return this.seqEqCalcIf, nil
	}
	this._f_seqEqCalcIf = true
	tmp11, err := this.CalcIf()
	if err != nil {
		return false, err
	}
	this.seqEqCalcIf = bool(this.Seq == tmp11)
	return this.seqEqCalcIf, nil
}
func (this *ExprIfIntEq) SeqEqLit() (v bool, err error) {
	if (this._f_seqEqLit) {
		return this.seqEqLit, nil
	}
	this._f_seqEqLit = true
	this.seqEqLit = bool(this.Seq == 16705)
	return this.seqEqLit, nil
}
func (this *ExprIfIntEq) SeqEqSeqIf() (v bool, err error) {
	if (this._f_seqEqSeqIf) {
		return this.seqEqSeqIf, nil
	}
	this._f_seqEqSeqIf = true
	this.seqEqSeqIf = bool(this.Seq == this.SeqIf)
	return this.seqEqSeqIf, nil
}
func (this *ExprIfIntEq) SeqIfEqLit() (v bool, err error) {
	if (this._f_seqIfEqLit) {
		return this.seqIfEqLit, nil
	}
	this._f_seqIfEqLit = true
	this.seqIfEqLit = bool(this.SeqIf == 16705)
	return this.seqIfEqLit, nil
}
