// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)

type RepeatUntilTermStruct struct {
	Records1 []*RepeatUntilTermStruct_BytesWrapper
	Records2 []*RepeatUntilTermStruct_BytesWrapper
	Records3 []*RepeatUntilTermStruct_BytesWrapper
	_io *kaitai.Stream
	_root *RepeatUntilTermStruct
	_parent kaitai.Struct
	_raw_Records1 [][]byte
	_raw_Records2 [][]byte
	_raw_Records3 [][]byte
}
func NewRepeatUntilTermStruct() *RepeatUntilTermStruct {
	return &RepeatUntilTermStruct{
	}
}

func (this RepeatUntilTermStruct) IO_() *kaitai.Stream {
	return this._io
}

func (this *RepeatUntilTermStruct) Read(io *kaitai.Stream, parent kaitai.Struct, root *RepeatUntilTermStruct) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp1, err := this._io.ReadBytesTerm(170, false, true, true)
		if err != nil {
			return err
		}
		_buf := tmp1
		this._raw_Records1 = append(this._raw_Records1, _buf)
		_io__raw_Records1 := kaitai.NewStream(bytes.NewReader(_buf))
		tmp2 := NewRepeatUntilTermStruct_BytesWrapper()
		err = tmp2.Read(_io__raw_Records1, this, this._root)
		if err != nil {
			return err
		}
		_it := tmp2
		this.Records1 = append(this.Records1, _it)
		if len(_it.Value) == 0 {
			break
		}
	}
	for i := 1;; i++ {
		tmp3, err := this._io.ReadBytesTerm(170, true, true, true)
		if err != nil {
			return err
		}
		_buf := tmp3
		this._raw_Records2 = append(this._raw_Records2, _buf)
		_io__raw_Records2 := kaitai.NewStream(bytes.NewReader(_buf))
		tmp4 := NewRepeatUntilTermStruct_BytesWrapper()
		err = tmp4.Read(_io__raw_Records2, this, this._root)
		if err != nil {
			return err
		}
		_it := tmp4
		this.Records2 = append(this.Records2, _it)
		if (bytes.Compare(_it.Value, []uint8{170}) != 0) {
			break
		}
	}
	for i := 1;; i++ {
		tmp5, err := this._io.ReadBytesTerm(85, false, false, true)
		if err != nil {
			return err
		}
		_buf := tmp5
		this._raw_Records3 = append(this._raw_Records3, _buf)
		_io__raw_Records3 := kaitai.NewStream(bytes.NewReader(_buf))
		tmp6 := NewRepeatUntilTermStruct_BytesWrapper()
		err = tmp6.Read(_io__raw_Records3, this, this._root)
		if err != nil {
			return err
		}
		_it := tmp6
		this.Records3 = append(this.Records3, _it)
		tmp7 := this.Records1
		if bytes.Equal(_it.Value, tmp7[len(tmp7) - 1].Value) {
			break
		}
	}
	return err
}
type RepeatUntilTermStruct_BytesWrapper struct {
	Value []byte
	_io *kaitai.Stream
	_root *RepeatUntilTermStruct
	_parent *RepeatUntilTermStruct
}
func NewRepeatUntilTermStruct_BytesWrapper() *RepeatUntilTermStruct_BytesWrapper {
	return &RepeatUntilTermStruct_BytesWrapper{
	}
}

func (this RepeatUntilTermStruct_BytesWrapper) IO_() *kaitai.Stream {
	return this._io
}

func (this *RepeatUntilTermStruct_BytesWrapper) Read(io *kaitai.Stream, parent *RepeatUntilTermStruct, root *RepeatUntilTermStruct) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp8, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp8 = tmp8
	this.Value = tmp8
	return err
}
