// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)

type TermStruct4 struct {
	S1 *TermStruct4_S1Type
	SkipTerm1 uint8
	S2 *TermStruct4_S2Type
	SkipTerm2 uint8
	S3 *TermStruct4_S3Type
	_io *kaitai.Stream
	_root *TermStruct4
	_parent kaitai.Struct
	_raw_S1 []byte
	_raw_S2 []byte
	_raw_S3 []byte
}
func NewTermStruct4() *TermStruct4 {
	return &TermStruct4{
	}
}

func (this TermStruct4) IO_() *kaitai.Stream {
	return this._io
}

func (this *TermStruct4) Read(io *kaitai.Stream, parent kaitai.Struct, root *TermStruct4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(3))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this._raw_S1 = tmp1
	_io__raw_S1 := kaitai.NewStream(bytes.NewReader(this._raw_S1))
	tmp2 := NewTermStruct4_S1Type()
	err = tmp2.Read(_io__raw_S1, this, this._root)
	if err != nil {
		return err
	}
	this.S1 = tmp2
	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SkipTerm1 = tmp3
	tmp4, err := this._io.ReadBytes(int(3))
	if err != nil {
		return err
	}
	tmp4 = tmp4
	this._raw_S2 = tmp4
	_io__raw_S2 := kaitai.NewStream(bytes.NewReader(this._raw_S2))
	tmp5 := NewTermStruct4_S2Type()
	err = tmp5.Read(_io__raw_S2, this, this._root)
	if err != nil {
		return err
	}
	this.S2 = tmp5
	tmp6, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SkipTerm2 = tmp6
	tmp7, err := this._io.ReadBytes(int(3))
	if err != nil {
		return err
	}
	tmp7 = tmp7
	this._raw_S3 = tmp7
	_io__raw_S3 := kaitai.NewStream(bytes.NewReader(this._raw_S3))
	tmp8 := NewTermStruct4_S3Type()
	err = tmp8.Read(_io__raw_S3, this, this._root)
	if err != nil {
		return err
	}
	this.S3 = tmp8
	return err
}
type TermStruct4_BytesWrapper struct {
	Value []byte
	_io *kaitai.Stream
	_root *TermStruct4
	_parent kaitai.Struct
}
func NewTermStruct4_BytesWrapper() *TermStruct4_BytesWrapper {
	return &TermStruct4_BytesWrapper{
	}
}

func (this TermStruct4_BytesWrapper) IO_() *kaitai.Stream {
	return this._io
}

func (this *TermStruct4_BytesWrapper) Read(io *kaitai.Stream, parent kaitai.Struct, root *TermStruct4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp9, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp9 = tmp9
	this.Value = tmp9
	return err
}
type TermStruct4_S1Type struct {
	Value *TermStruct4_BytesWrapper
	_io *kaitai.Stream
	_root *TermStruct4
	_parent *TermStruct4
	_raw_Value []byte
}
func NewTermStruct4_S1Type() *TermStruct4_S1Type {
	return &TermStruct4_S1Type{
	}
}

func (this TermStruct4_S1Type) IO_() *kaitai.Stream {
	return this._io
}

func (this *TermStruct4_S1Type) Read(io *kaitai.Stream, parent *TermStruct4, root *TermStruct4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadBytesTerm(124, false, true, false)
	if err != nil {
		return err
	}
	this._raw_Value = tmp10
	_io__raw_Value := kaitai.NewStream(bytes.NewReader(this._raw_Value))
	tmp11 := NewTermStruct4_BytesWrapper()
	err = tmp11.Read(_io__raw_Value, this, this._root)
	if err != nil {
		return err
	}
	this.Value = tmp11
	return err
}
type TermStruct4_S2Type struct {
	Value *TermStruct4_BytesWrapper
	_io *kaitai.Stream
	_root *TermStruct4
	_parent *TermStruct4
	_raw_Value []byte
}
func NewTermStruct4_S2Type() *TermStruct4_S2Type {
	return &TermStruct4_S2Type{
	}
}

func (this TermStruct4_S2Type) IO_() *kaitai.Stream {
	return this._io
}

func (this *TermStruct4_S2Type) Read(io *kaitai.Stream, parent *TermStruct4, root *TermStruct4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp12, err := this._io.ReadBytesTerm(124, false, false, false)
	if err != nil {
		return err
	}
	this._raw_Value = tmp12
	_io__raw_Value := kaitai.NewStream(bytes.NewReader(this._raw_Value))
	tmp13 := NewTermStruct4_BytesWrapper()
	err = tmp13.Read(_io__raw_Value, this, this._root)
	if err != nil {
		return err
	}
	this.Value = tmp13
	return err
}
type TermStruct4_S3Type struct {
	Value *TermStruct4_BytesWrapper
	_io *kaitai.Stream
	_root *TermStruct4
	_parent *TermStruct4
	_raw_Value []byte
}
func NewTermStruct4_S3Type() *TermStruct4_S3Type {
	return &TermStruct4_S3Type{
	}
}

func (this TermStruct4_S3Type) IO_() *kaitai.Stream {
	return this._io
}

func (this *TermStruct4_S3Type) Read(io *kaitai.Stream, parent *TermStruct4, root *TermStruct4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp14, err := this._io.ReadBytesTerm(64, true, true, false)
	if err != nil {
		return err
	}
	this._raw_Value = tmp14
	_io__raw_Value := kaitai.NewStream(bytes.NewReader(this._raw_Value))
	tmp15 := NewTermStruct4_BytesWrapper()
	err = tmp15.Read(_io__raw_Value, this, this._root)
	if err != nil {
		return err
	}
	this.Value = tmp15
	return err
}
