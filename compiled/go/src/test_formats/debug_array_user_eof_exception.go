// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type DebugArrayUserEofException struct {
	OneCat *DebugArrayUserEofException_Cat
	ArrayOfCats []*DebugArrayUserEofException_Cat
	_io *kaitai.Stream
	_root *DebugArrayUserEofException
	_parent kaitai.Struct
}
func NewDebugArrayUserEofException() *DebugArrayUserEofException {
	return &DebugArrayUserEofException{
	}
}

func (this DebugArrayUserEofException) IO_() *kaitai.Stream {
	return this._io
}

func (this *DebugArrayUserEofException) Read(io *kaitai.Stream, parent kaitai.Struct, root *DebugArrayUserEofException) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewDebugArrayUserEofException_Cat()
	err = tmp1.Read(this._io, this, this._root)
	this.OneCat = tmp1
	if err != nil {
		return err
	}
	for i := 0; i < int(3); i++ {
		_ = i
		tmp2 := NewDebugArrayUserEofException_Cat()
		err = tmp2.Read(this._io, this, this._root)
		this.ArrayOfCats = append(this.ArrayOfCats, tmp2)
		if err != nil {
			return err
		}
	}
	return err
}
type DebugArrayUserEofException_Cat struct {
	Meow uint8
	Chirp uint8
	_io *kaitai.Stream
	_root *DebugArrayUserEofException
	_parent *DebugArrayUserEofException
}
func NewDebugArrayUserEofException_Cat() *DebugArrayUserEofException_Cat {
	return &DebugArrayUserEofException_Cat{
	}
}

func (this DebugArrayUserEofException_Cat) IO_() *kaitai.Stream {
	return this._io
}

func (this *DebugArrayUserEofException_Cat) Read(io *kaitai.Stream, parent *DebugArrayUserEofException, root *DebugArrayUserEofException) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Meow = tmp3
	tmp4, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Chirp = tmp4
	return err
}
