// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"io"
)

type InstanceInRepeatExpr struct {
	Chunks []*InstanceInRepeatExpr_Chunk
	_io *kaitai.Stream
	_root *InstanceInRepeatExpr
	_parent kaitai.Struct
	_f_numChunks bool
	numChunks uint32
}
func NewInstanceInRepeatExpr() *InstanceInRepeatExpr {
	return &InstanceInRepeatExpr{
	}
}

func (this InstanceInRepeatExpr) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceInRepeatExpr) Read(io *kaitai.Stream, parent kaitai.Struct, root *InstanceInRepeatExpr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this.NumChunks()
	if err != nil {
		return err
	}
	for i := 0; i < int(tmp1); i++ {
		_ = i
		tmp2 := NewInstanceInRepeatExpr_Chunk()
		err = tmp2.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Chunks = append(this.Chunks, tmp2)
	}
	return err
}
func (this *InstanceInRepeatExpr) NumChunks() (v uint32, err error) {
	if (this._f_numChunks) {
		return this.numChunks, nil
	}
	this._f_numChunks = true
	_pos, err := this._io.Pos()
	if err != nil {
		return 0, err
	}
	tmp3, err := this._io.Pos()
	if err != nil {
		return 0, err
	}
	_, err = this._io.Seek(int64(tmp3 + 16), io.SeekStart)
	if err != nil {
		return 0, err
	}
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return 0, err
	}
	this.numChunks = tmp4
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return 0, err
	}
	return this.numChunks, nil
}
type InstanceInRepeatExpr_Chunk struct {
	Offset uint32
	Len uint32
	_io *kaitai.Stream
	_root *InstanceInRepeatExpr
	_parent *InstanceInRepeatExpr
}
func NewInstanceInRepeatExpr_Chunk() *InstanceInRepeatExpr_Chunk {
	return &InstanceInRepeatExpr_Chunk{
	}
}

func (this InstanceInRepeatExpr_Chunk) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceInRepeatExpr_Chunk) Read(io *kaitai.Stream, parent *InstanceInRepeatExpr, root *InstanceInRepeatExpr) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Offset = uint32(tmp5)
	tmp6, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.Len = uint32(tmp6)
	return err
}
