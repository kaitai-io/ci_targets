// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type ExprCalcArrayOps struct {
	_io *kaitai.Stream
	_root *ExprCalcArrayOps
	_parent kaitai.Struct
	_f_doubleArray bool
	doubleArray []float64
	_f_doubleArrayFirst bool
	doubleArrayFirst float64
	_f_doubleArrayLast bool
	doubleArrayLast float64
	_f_doubleArrayMax bool
	doubleArrayMax float64
	_f_doubleArrayMid bool
	doubleArrayMid float64
	_f_doubleArrayMin bool
	doubleArrayMin float64
	_f_doubleArraySize bool
	doubleArraySize int
	_f_intArray bool
	intArray []int
	_f_intArrayFirst bool
	intArrayFirst int
	_f_intArrayLast bool
	intArrayLast int
	_f_intArrayMax bool
	intArrayMax int
	_f_intArrayMid bool
	intArrayMid int
	_f_intArrayMin bool
	intArrayMin int
	_f_intArraySize bool
	intArraySize int
	_f_strArray bool
	strArray []string
	_f_strArrayFirst bool
	strArrayFirst string
	_f_strArrayLast bool
	strArrayLast string
	_f_strArrayMax bool
	strArrayMax string
	_f_strArrayMid bool
	strArrayMid string
	_f_strArrayMin bool
	strArrayMin string
	_f_strArraySize bool
	strArraySize int
}
func NewExprCalcArrayOps() *ExprCalcArrayOps {
	return &ExprCalcArrayOps{
	}
}

func (this ExprCalcArrayOps) IO_() *kaitai.Stream {
	return this._io
}

func (this *ExprCalcArrayOps) Read(io *kaitai.Stream, parent kaitai.Struct, root *ExprCalcArrayOps) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
func (this *ExprCalcArrayOps) DoubleArray() (v []float64, err error) {
	if (this._f_doubleArray) {
		return this.doubleArray, nil
	}
	this._f_doubleArray = true
	this.doubleArray = []float64([]float64{10.0, 25.0, 50.0, 100.0, 3.14159})
	return this.doubleArray, nil
}
func (this *ExprCalcArrayOps) DoubleArrayFirst() (v float64, err error) {
	if (this._f_doubleArrayFirst) {
		return this.doubleArrayFirst, nil
	}
	this._f_doubleArrayFirst = true
	tmp1, err := this.DoubleArray()
	if err != nil {
		return 0, err
	}
	this.doubleArrayFirst = float64(tmp1[0])
	return this.doubleArrayFirst, nil
}
func (this *ExprCalcArrayOps) DoubleArrayLast() (v float64, err error) {
	if (this._f_doubleArrayLast) {
		return this.doubleArrayLast, nil
	}
	this._f_doubleArrayLast = true
	tmp3, err := this.DoubleArray()
	if err != nil {
		return 0, err
	}
	tmp2 := tmp3
	this.doubleArrayLast = float64(tmp2[len(tmp2) - 1])
	return this.doubleArrayLast, nil
}
func (this *ExprCalcArrayOps) DoubleArrayMax() (v float64, err error) {
	if (this._f_doubleArrayMax) {
		return this.doubleArrayMax, nil
	}
	this._f_doubleArrayMax = true
	tmp6, err := this.DoubleArray()
	if err != nil {
		return 0, err
	}
	tmp4 := tmp6[0]
	tmp7, err := this.DoubleArray()
	if err != nil {
		return 0, err
	}
	for _, tmp5 := range tmp7 {
		if tmp4 < tmp5 {
			tmp4 = tmp5
		}
	}
	this.doubleArrayMax = float64(tmp4)
	return this.doubleArrayMax, nil
}
func (this *ExprCalcArrayOps) DoubleArrayMid() (v float64, err error) {
	if (this._f_doubleArrayMid) {
		return this.doubleArrayMid, nil
	}
	this._f_doubleArrayMid = true
	tmp8, err := this.DoubleArray()
	if err != nil {
		return 0, err
	}
	this.doubleArrayMid = float64(tmp8[1])
	return this.doubleArrayMid, nil
}
func (this *ExprCalcArrayOps) DoubleArrayMin() (v float64, err error) {
	if (this._f_doubleArrayMin) {
		return this.doubleArrayMin, nil
	}
	this._f_doubleArrayMin = true
	tmp11, err := this.DoubleArray()
	if err != nil {
		return 0, err
	}
	tmp9 := tmp11[0]
	tmp12, err := this.DoubleArray()
	if err != nil {
		return 0, err
	}
	for _, tmp10 := range tmp12 {
		if tmp9 > tmp10 {
			tmp9 = tmp10
		}
	}
	this.doubleArrayMin = float64(tmp9)
	return this.doubleArrayMin, nil
}
func (this *ExprCalcArrayOps) DoubleArraySize() (v int, err error) {
	if (this._f_doubleArraySize) {
		return this.doubleArraySize, nil
	}
	this._f_doubleArraySize = true
	tmp13, err := this.DoubleArray()
	if err != nil {
		return 0, err
	}
	this.doubleArraySize = int(len(tmp13))
	return this.doubleArraySize, nil
}
func (this *ExprCalcArrayOps) IntArray() (v []int, err error) {
	if (this._f_intArray) {
		return this.intArray, nil
	}
	this._f_intArray = true
	this.intArray = []int([]int{10, 25, 50, 100, 200, 500, 1000})
	return this.intArray, nil
}
func (this *ExprCalcArrayOps) IntArrayFirst() (v int, err error) {
	if (this._f_intArrayFirst) {
		return this.intArrayFirst, nil
	}
	this._f_intArrayFirst = true
	tmp14, err := this.IntArray()
	if err != nil {
		return 0, err
	}
	this.intArrayFirst = int(tmp14[0])
	return this.intArrayFirst, nil
}
func (this *ExprCalcArrayOps) IntArrayLast() (v int, err error) {
	if (this._f_intArrayLast) {
		return this.intArrayLast, nil
	}
	this._f_intArrayLast = true
	tmp16, err := this.IntArray()
	if err != nil {
		return 0, err
	}
	tmp15 := tmp16
	this.intArrayLast = int(tmp15[len(tmp15) - 1])
	return this.intArrayLast, nil
}
func (this *ExprCalcArrayOps) IntArrayMax() (v int, err error) {
	if (this._f_intArrayMax) {
		return this.intArrayMax, nil
	}
	this._f_intArrayMax = true
	tmp19, err := this.IntArray()
	if err != nil {
		return 0, err
	}
	tmp17 := tmp19[0]
	tmp20, err := this.IntArray()
	if err != nil {
		return 0, err
	}
	for _, tmp18 := range tmp20 {
		if tmp17 < tmp18 {
			tmp17 = tmp18
		}
	}
	this.intArrayMax = int(tmp17)
	return this.intArrayMax, nil
}
func (this *ExprCalcArrayOps) IntArrayMid() (v int, err error) {
	if (this._f_intArrayMid) {
		return this.intArrayMid, nil
	}
	this._f_intArrayMid = true
	tmp21, err := this.IntArray()
	if err != nil {
		return 0, err
	}
	this.intArrayMid = int(tmp21[1])
	return this.intArrayMid, nil
}
func (this *ExprCalcArrayOps) IntArrayMin() (v int, err error) {
	if (this._f_intArrayMin) {
		return this.intArrayMin, nil
	}
	this._f_intArrayMin = true
	tmp24, err := this.IntArray()
	if err != nil {
		return 0, err
	}
	tmp22 := tmp24[0]
	tmp25, err := this.IntArray()
	if err != nil {
		return 0, err
	}
	for _, tmp23 := range tmp25 {
		if tmp22 > tmp23 {
			tmp22 = tmp23
		}
	}
	this.intArrayMin = int(tmp22)
	return this.intArrayMin, nil
}
func (this *ExprCalcArrayOps) IntArraySize() (v int, err error) {
	if (this._f_intArraySize) {
		return this.intArraySize, nil
	}
	this._f_intArraySize = true
	tmp26, err := this.IntArray()
	if err != nil {
		return 0, err
	}
	this.intArraySize = int(len(tmp26))
	return this.intArraySize, nil
}
func (this *ExprCalcArrayOps) StrArray() (v []string, err error) {
	if (this._f_strArray) {
		return this.strArray, nil
	}
	this._f_strArray = true
	this.strArray = []string([]string{"un", "deux", "trois", "quatre"})
	return this.strArray, nil
}
func (this *ExprCalcArrayOps) StrArrayFirst() (v string, err error) {
	if (this._f_strArrayFirst) {
		return this.strArrayFirst, nil
	}
	this._f_strArrayFirst = true
	tmp27, err := this.StrArray()
	if err != nil {
		return "", err
	}
	this.strArrayFirst = string(tmp27[0])
	return this.strArrayFirst, nil
}
func (this *ExprCalcArrayOps) StrArrayLast() (v string, err error) {
	if (this._f_strArrayLast) {
		return this.strArrayLast, nil
	}
	this._f_strArrayLast = true
	tmp29, err := this.StrArray()
	if err != nil {
		return "", err
	}
	tmp28 := tmp29
	this.strArrayLast = string(tmp28[len(tmp28) - 1])
	return this.strArrayLast, nil
}
func (this *ExprCalcArrayOps) StrArrayMax() (v string, err error) {
	if (this._f_strArrayMax) {
		return this.strArrayMax, nil
	}
	this._f_strArrayMax = true
	tmp32, err := this.StrArray()
	if err != nil {
		return "", err
	}
	tmp30 := tmp32[0]
	tmp33, err := this.StrArray()
	if err != nil {
		return "", err
	}
	for _, tmp31 := range tmp33 {
		if tmp30 < tmp31 {
			tmp30 = tmp31
		}
	}
	this.strArrayMax = string(tmp30)
	return this.strArrayMax, nil
}
func (this *ExprCalcArrayOps) StrArrayMid() (v string, err error) {
	if (this._f_strArrayMid) {
		return this.strArrayMid, nil
	}
	this._f_strArrayMid = true
	tmp34, err := this.StrArray()
	if err != nil {
		return "", err
	}
	this.strArrayMid = string(tmp34[1])
	return this.strArrayMid, nil
}
func (this *ExprCalcArrayOps) StrArrayMin() (v string, err error) {
	if (this._f_strArrayMin) {
		return this.strArrayMin, nil
	}
	this._f_strArrayMin = true
	tmp37, err := this.StrArray()
	if err != nil {
		return "", err
	}
	tmp35 := tmp37[0]
	tmp38, err := this.StrArray()
	if err != nil {
		return "", err
	}
	for _, tmp36 := range tmp38 {
		if tmp35 > tmp36 {
			tmp35 = tmp36
		}
	}
	this.strArrayMin = string(tmp35)
	return this.strArrayMin, nil
}
func (this *ExprCalcArrayOps) StrArraySize() (v int, err error) {
	if (this._f_strArraySize) {
		return this.strArraySize, nil
	}
	this._f_strArraySize = true
	tmp39, err := this.StrArray()
	if err != nil {
		return 0, err
	}
	this.strArraySize = int(len(tmp39))
	return this.strArraySize, nil
}
