// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"io"
)

type PositionInSeq struct {
	Numbers []uint8
	_io *kaitai.Stream
	_root *PositionInSeq
	_parent kaitai.Struct
	_f_header bool
	header *PositionInSeq_HeaderObj
}
func NewPositionInSeq() *PositionInSeq {
	return &PositionInSeq{
	}
}

func (this PositionInSeq) IO_() *kaitai.Stream {
	return this._io
}

func (this *PositionInSeq) Read(io *kaitai.Stream, parent kaitai.Struct, root *PositionInSeq) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this.Header()
	if err != nil {
		return err
	}
	for i := 0; i < int(tmp1.QtyNumbers); i++ {
		_ = i
		tmp2, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Numbers = append(this.Numbers, tmp2)
	}
	return err
}
func (this *PositionInSeq) Header() (v *PositionInSeq_HeaderObj, err error) {
	if (this._f_header) {
		return this.header, nil
	}
	this._f_header = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(16), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp3 := NewPositionInSeq_HeaderObj()
	err = tmp3.Read(this._io, this, this._root)
	if err != nil {
		return nil, err
	}
	this.header = tmp3
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.header, nil
}
type PositionInSeq_HeaderObj struct {
	QtyNumbers uint32
	_io *kaitai.Stream
	_root *PositionInSeq
	_parent *PositionInSeq
}
func NewPositionInSeq_HeaderObj() *PositionInSeq_HeaderObj {
	return &PositionInSeq_HeaderObj{
	}
}

func (this PositionInSeq_HeaderObj) IO_() *kaitai.Stream {
	return this._io
}

func (this *PositionInSeq_HeaderObj) Read(io *kaitai.Stream, parent *PositionInSeq, root *PositionInSeq) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.QtyNumbers = uint32(tmp4)
	return err
}
