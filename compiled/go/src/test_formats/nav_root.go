// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type NavRoot struct {
	Header *NavRoot_HeaderObj
	Index *NavRoot_IndexObj
	_io *kaitai.Stream
	_root *NavRoot
	_parent kaitai.Struct
}
func NewNavRoot() *NavRoot {
	return &NavRoot{
	}
}

func (this NavRoot) IO_() *kaitai.Stream {
	return this._io
}

func (this *NavRoot) Read(io *kaitai.Stream, parent kaitai.Struct, root *NavRoot) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1 := NewNavRoot_HeaderObj()
	err = tmp1.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Header = tmp1
	tmp2 := NewNavRoot_IndexObj()
	err = tmp2.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.Index = tmp2
	return err
}
type NavRoot_Entry struct {
	Filename string
	_io *kaitai.Stream
	_root *NavRoot
	_parent *NavRoot_IndexObj
}
func NewNavRoot_Entry() *NavRoot_Entry {
	return &NavRoot_Entry{
	}
}

func (this NavRoot_Entry) IO_() *kaitai.Stream {
	return this._io
}

func (this *NavRoot_Entry) Read(io *kaitai.Stream, parent *NavRoot_IndexObj, root *NavRoot) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp3, err := this._io.ReadBytes(int(this._root.Header.FilenameLen))
	if err != nil {
		return err
	}
	tmp3 = tmp3
	this.Filename = string(tmp3)
	return err
}
type NavRoot_HeaderObj struct {
	QtyEntries uint32
	FilenameLen uint32
	_io *kaitai.Stream
	_root *NavRoot
	_parent *NavRoot
}
func NewNavRoot_HeaderObj() *NavRoot_HeaderObj {
	return &NavRoot_HeaderObj{
	}
}

func (this NavRoot_HeaderObj) IO_() *kaitai.Stream {
	return this._io
}

func (this *NavRoot_HeaderObj) Read(io *kaitai.Stream, parent *NavRoot, root *NavRoot) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.QtyEntries = uint32(tmp4)
	tmp5, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.FilenameLen = uint32(tmp5)
	return err
}
type NavRoot_IndexObj struct {
	Magic []byte
	Entries []*NavRoot_Entry
	_io *kaitai.Stream
	_root *NavRoot
	_parent *NavRoot
}
func NewNavRoot_IndexObj() *NavRoot_IndexObj {
	return &NavRoot_IndexObj{
	}
}

func (this NavRoot_IndexObj) IO_() *kaitai.Stream {
	return this._io
}

func (this *NavRoot_IndexObj) Read(io *kaitai.Stream, parent *NavRoot, root *NavRoot) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp6, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp6 = tmp6
	this.Magic = tmp6
	for i := 0; i < int(this._root.Header.QtyEntries); i++ {
		_ = i
		tmp7 := NewNavRoot_Entry()
		err = tmp7.Read(this._io, this, this._root)
		if err != nil {
			return err
		}
		this.Entries = append(this.Entries, tmp7)
	}
	return err
}
