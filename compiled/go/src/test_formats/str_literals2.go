// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type StrLiterals2 struct {
	_io *kaitai.Stream
	_root *StrLiterals2
	_parent kaitai.Struct
	_f_atSign bool
	atSign string
	_f_dollar1 bool
	dollar1 string
	_f_dollar2 bool
	dollar2 string
	_f_hash bool
	hash string
}
func NewStrLiterals2() *StrLiterals2 {
	return &StrLiterals2{
	}
}

func (this StrLiterals2) IO_() *kaitai.Stream {
	return this._io
}

func (this *StrLiterals2) Read(io *kaitai.Stream, parent kaitai.Struct, root *StrLiterals2) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
func (this *StrLiterals2) AtSign() (v string, err error) {
	if (this._f_atSign) {
		return this.atSign, nil
	}
	this._f_atSign = true
	this.atSign = string("@foo")
	return this.atSign, nil
}
func (this *StrLiterals2) Dollar1() (v string, err error) {
	if (this._f_dollar1) {
		return this.dollar1, nil
	}
	this._f_dollar1 = true
	this.dollar1 = string("$foo")
	return this.dollar1, nil
}
func (this *StrLiterals2) Dollar2() (v string, err error) {
	if (this._f_dollar2) {
		return this.dollar2, nil
	}
	this._f_dollar2 = true
	this.dollar2 = string("${foo}")
	return this.dollar2, nil
}
func (this *StrLiterals2) Hash() (v string, err error) {
	if (this._f_hash) {
		return this.hash, nil
	}
	this._f_hash = true
	this.hash = string("#{foo}")
	return this.hash, nil
}
