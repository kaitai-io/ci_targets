// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
)

type InstanceInSized struct {
	Cont *InstanceInSized_Wrapper
	_io *kaitai.Stream
	_root *InstanceInSized
	_parent kaitai.Struct
	_raw_Cont []byte
}
func NewInstanceInSized() *InstanceInSized {
	return &InstanceInSized{
	}
}

func (this InstanceInSized) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceInSized) Read(io *kaitai.Stream, parent kaitai.Struct, root *InstanceInSized) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(16))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this._raw_Cont = tmp1
	_io__raw_Cont := kaitai.NewStream(bytes.NewReader(this._raw_Cont))
	tmp2 := NewInstanceInSized_Wrapper()
	err = tmp2.Read(_io__raw_Cont, this, this._root)
	if err != nil {
		return err
	}
	this.Cont = tmp2
	return err
}
type InstanceInSized_Bar struct {
	SeqF uint8
	_io *kaitai.Stream
	_root *InstanceInSized
	_parent *InstanceInSized_Wrapper
	_f_inst bool
	inst []byte
}
func NewInstanceInSized_Bar() *InstanceInSized_Bar {
	return &InstanceInSized_Bar{
	}
}

func (this InstanceInSized_Bar) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceInSized_Bar) Read(io *kaitai.Stream, parent *InstanceInSized_Wrapper, root *InstanceInSized) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SeqF = tmp3
	return err
}
func (this *InstanceInSized_Bar) Inst() (v []byte, err error) {
	if (this._f_inst) {
		return this.inst, nil
	}
	this._f_inst = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(4 + 1), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp4, err := this._io.ReadBytes(int(3))
	if err != nil {
		return nil, err
	}
	tmp4 = tmp4
	this.inst = tmp4
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.inst, nil
}
type InstanceInSized_Baz struct {
	SeqF uint8
	_io *kaitai.Stream
	_root *InstanceInSized
	_parent *InstanceInSized_Wrapper
	_f_inst bool
	inst []byte
}
func NewInstanceInSized_Baz() *InstanceInSized_Baz {
	return &InstanceInSized_Baz{
	}
}

func (this InstanceInSized_Baz) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceInSized_Baz) Read(io *kaitai.Stream, parent *InstanceInSized_Wrapper, root *InstanceInSized) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp5, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SeqF = tmp5
	return err
}
func (this *InstanceInSized_Baz) Inst() (v []byte, err error) {
	if (this._f_inst) {
		return this.inst, nil
	}
	this._f_inst = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(8 + 1), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp6, err := this._io.ReadBytes(int(3))
	if err != nil {
		return nil, err
	}
	tmp6 = tmp6
	this.inst = tmp6
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.inst, nil
}
type InstanceInSized_Qux struct {
	SeqF uint8
	_io *kaitai.Stream
	_root *InstanceInSized
	_parent *InstanceInSized_Wrapper
	_f_instInvoked bool
	instInvoked uint8
	_f_instUnusedBySeq bool
	instUnusedBySeq []byte
}
func NewInstanceInSized_Qux() *InstanceInSized_Qux {
	return &InstanceInSized_Qux{
	}
}

func (this InstanceInSized_Qux) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceInSized_Qux) Read(io *kaitai.Stream, parent *InstanceInSized_Wrapper, root *InstanceInSized) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp7, err := this.InstInvoked()
	if err != nil {
		return err
	}
	if (tmp7 > 0) {
		tmp8, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.SeqF = tmp8
	}
	return err
}
func (this *InstanceInSized_Qux) InstInvoked() (v uint8, err error) {
	if (this._f_instInvoked) {
		return this.instInvoked, nil
	}
	this._f_instInvoked = true
	_pos, err := this._io.Pos()
	if err != nil {
		return 0, err
	}
	tmp9, err := this._io.Pos()
	if err != nil {
		return 0, err
	}
	_, err = this._io.Seek(int64(tmp9 + 1), io.SeekStart)
	if err != nil {
		return 0, err
	}
	tmp10, err := this._io.ReadU1()
	if err != nil {
		return 0, err
	}
	this.instInvoked = tmp10
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return 0, err
	}
	return this.instInvoked, nil
}
func (this *InstanceInSized_Qux) InstUnusedBySeq() (v []byte, err error) {
	if (this._f_instUnusedBySeq) {
		return this.instUnusedBySeq, nil
	}
	this._f_instUnusedBySeq = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	tmp11, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(tmp11 + 1), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp12, err := this._io.ReadBytes(int(2))
	if err != nil {
		return nil, err
	}
	tmp12 = tmp12
	this.instUnusedBySeq = tmp12
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.instUnusedBySeq, nil
}
type InstanceInSized_Wrapper struct {
	SeqSized *InstanceInSized_Qux
	SeqInStream *InstanceInSized_Bar
	_io *kaitai.Stream
	_root *InstanceInSized
	_parent *InstanceInSized
	_raw_SeqSized []byte
	_raw_instSized []byte
	_f_instInStream bool
	instInStream *InstanceInSized_Baz
	_f_instSized bool
	instSized *InstanceInSized_Qux
}
func NewInstanceInSized_Wrapper() *InstanceInSized_Wrapper {
	return &InstanceInSized_Wrapper{
	}
}

func (this InstanceInSized_Wrapper) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceInSized_Wrapper) Read(io *kaitai.Stream, parent *InstanceInSized, root *InstanceInSized) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp13, err := this._io.ReadBytes(int(4))
	if err != nil {
		return err
	}
	tmp13 = tmp13
	this._raw_SeqSized = tmp13
	_io__raw_SeqSized := kaitai.NewStream(bytes.NewReader(this._raw_SeqSized))
	tmp14 := NewInstanceInSized_Qux()
	err = tmp14.Read(_io__raw_SeqSized, this, this._root)
	if err != nil {
		return err
	}
	this.SeqSized = tmp14
	tmp15 := NewInstanceInSized_Bar()
	err = tmp15.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.SeqInStream = tmp15
	return err
}
func (this *InstanceInSized_Wrapper) InstInStream() (v *InstanceInSized_Baz, err error) {
	if (this._f_instInStream) {
		return this.instInStream, nil
	}
	this._f_instInStream = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	tmp16, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(tmp16 + 3), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp17 := NewInstanceInSized_Baz()
	err = tmp17.Read(this._io, this, this._root)
	if err != nil {
		return nil, err
	}
	this.instInStream = tmp17
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.instInStream, nil
}
func (this *InstanceInSized_Wrapper) InstSized() (v *InstanceInSized_Qux, err error) {
	if (this._f_instSized) {
		return this.instSized, nil
	}
	this._f_instSized = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	tmp18, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(tmp18 + 7), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp19, err := this._io.ReadBytes(int(4))
	if err != nil {
		return nil, err
	}
	tmp19 = tmp19
	this._raw_instSized = tmp19
	_io__raw_instSized := kaitai.NewStream(bytes.NewReader(this._raw_instSized))
	tmp20 := NewInstanceInSized_Qux()
	err = tmp20.Read(_io__raw_instSized, this, this._root)
	if err != nil {
		return nil, err
	}
	this.instSized = tmp20
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.instSized, nil
}
