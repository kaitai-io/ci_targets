// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"unicode/utf8"
	"strconv"
)

type ExprOpsParens struct {
	_io *kaitai.Stream
	_root *ExprOpsParens
	_parent interface{}
	_f_iM13 bool
	iM13 int
	_f_strConcatLen bool
	strConcatLen int
	_f_strConcatSubstr2To7 bool
	strConcatSubstr2To7 string
	_f_str0To4 bool
	str0To4 string
	_f_str5To9 bool
	str5To9 string
	_f_strConcatRev bool
	strConcatRev string
	_f_boolEq bool
	boolEq int
	_f_boolAnd bool
	boolAnd int
	_f_iSumToStr bool
	iSumToStr string
	_f_boolOr bool
	boolOr int
	_f_f2pi bool
	f2pi float64
	_f_fSumToInt bool
	fSumToInt int
	_f_fE bool
	fE float64
	_f_i42 bool
	i42 int8
	_f_strConcatToI bool
	strConcatToI int
}
func NewExprOpsParens() *ExprOpsParens {
	return &ExprOpsParens{
	}
}

func (this *ExprOpsParens) Read(io *kaitai.Stream, parent interface{}, root *ExprOpsParens) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	return err
}
func (this *ExprOpsParens) IM13() (v int, err error) {
	if (this._f_iM13) {
		return this.iM13, nil
	}
	this.iM13 = int(-13)
	this._f_iM13 = true
	return this.iM13, nil
}
func (this *ExprOpsParens) StrConcatLen() (v int, err error) {
	if (this._f_strConcatLen) {
		return this.strConcatLen, nil
	}
	tmp1, err := this.Str0To4()
	if err != nil {
		return 0, err
	}
	tmp2, err := this.Str5To9()
	if err != nil {
		return 0, err
	}
	this.strConcatLen = int(utf8.RuneCountInString(tmp1 + tmp2))
	this._f_strConcatLen = true
	return this.strConcatLen, nil
}
func (this *ExprOpsParens) StrConcatSubstr2To7() (v string, err error) {
	if (this._f_strConcatSubstr2To7) {
		return this.strConcatSubstr2To7, nil
	}
	tmp3, err := this.Str0To4()
	if err != nil {
		return "", err
	}
	tmp4, err := this.Str5To9()
	if err != nil {
		return "", err
	}
	this.strConcatSubstr2To7 = string(tmp3 + tmp4[2:7])
	this._f_strConcatSubstr2To7 = true
	return this.strConcatSubstr2To7, nil
}
func (this *ExprOpsParens) Str0To4() (v string, err error) {
	if (this._f_str0To4) {
		return this.str0To4, nil
	}
	this.str0To4 = string("01234")
	this._f_str0To4 = true
	return this.str0To4, nil
}
func (this *ExprOpsParens) Str5To9() (v string, err error) {
	if (this._f_str5To9) {
		return this.str5To9, nil
	}
	this.str5To9 = string("56789")
	this._f_str5To9 = true
	return this.str5To9, nil
}
func (this *ExprOpsParens) StrConcatRev() (v string, err error) {
	if (this._f_strConcatRev) {
		return this.strConcatRev, nil
	}
	tmp5, err := this.Str0To4()
	if err != nil {
		return "", err
	}
	tmp6, err := this.Str5To9()
	if err != nil {
		return "", err
	}
	this.strConcatRev = string(kaitai.StringReverse(tmp5 + tmp6))
	this._f_strConcatRev = true
	return this.strConcatRev, nil
}
func (this *ExprOpsParens) BoolEq() (v int, err error) {
	if (this._f_boolEq) {
		return this.boolEq, nil
	}
	tmp7 := 0
	if false == true {
		tmp7 = 1
	}
	this.boolEq = int(tmp7)
	this._f_boolEq = true
	return this.boolEq, nil
}
func (this *ExprOpsParens) BoolAnd() (v int, err error) {
	if (this._f_boolAnd) {
		return this.boolAnd, nil
	}
	tmp8 := 0
	if  ((false) && (true))  {
		tmp8 = 1
	}
	this.boolAnd = int(tmp8)
	this._f_boolAnd = true
	return this.boolAnd, nil
}
func (this *ExprOpsParens) ISumToStr() (v string, err error) {
	if (this._f_iSumToStr) {
		return this.iSumToStr, nil
	}
	tmp9, err := this.I42()
	if err != nil {
		return "", err
	}
	tmp10, err := this.IM13()
	if err != nil {
		return "", err
	}
	this.iSumToStr = string(strconv.FormatInt(int64((tmp9 + tmp10)), 10))
	this._f_iSumToStr = true
	return this.iSumToStr, nil
}
func (this *ExprOpsParens) BoolOr() (v int, err error) {
	if (this._f_boolOr) {
		return this.boolOr, nil
	}
	tmp11 := 0
	if  ((!(false)) || (false))  {
		tmp11 = 1
	}
	this.boolOr = int(tmp11)
	this._f_boolOr = true
	return this.boolOr, nil
}
func (this *ExprOpsParens) F2pi() (v float64, err error) {
	if (this._f_f2pi) {
		return this.f2pi, nil
	}
	this.f2pi = float64(6.28)
	this._f_f2pi = true
	return this.f2pi, nil
}
func (this *ExprOpsParens) FSumToInt() (v int, err error) {
	if (this._f_fSumToInt) {
		return this.fSumToInt, nil
	}
	tmp12, err := this.F2pi()
	if err != nil {
		return 0, err
	}
	tmp13, err := this.FE()
	if err != nil {
		return 0, err
	}
	this.fSumToInt = int(int((tmp12 + tmp13)))
	this._f_fSumToInt = true
	return this.fSumToInt, nil
}
func (this *ExprOpsParens) FE() (v float64, err error) {
	if (this._f_fE) {
		return this.fE, nil
	}
	this.fE = float64(2.72)
	this._f_fE = true
	return this.fE, nil
}
func (this *ExprOpsParens) I42() (v int8, err error) {
	if (this._f_i42) {
		return this.i42, nil
	}
	this.i42 = int8(42)
	this._f_i42 = true
	return this.i42, nil
}
func (this *ExprOpsParens) StrConcatToI() (v int, err error) {
	if (this._f_strConcatToI) {
		return this.strConcatToI, nil
	}
	tmp14, err := this.Str0To4()
	if err != nil {
		return 0, err
	}
	tmp15, err := this.Str5To9()
	if err != nil {
		return 0, err
	}
	tmp16, err := strconv.ParseInt(tmp14 + tmp15, 10, 0)
	if err != nil {
		return 0, err
	}
	this.strConcatToI = int(tmp16)
	this._f_strConcatToI = true
	return this.strConcatToI, nil
}
