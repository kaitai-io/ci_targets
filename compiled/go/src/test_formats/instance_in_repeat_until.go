// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"io"
)

type InstanceInRepeatUntil struct {
	Entries []int16
	_io *kaitai.Stream
	_root *InstanceInRepeatUntil
	_parent kaitai.Struct
	_f_untilVal bool
	untilVal int16
}
func NewInstanceInRepeatUntil() *InstanceInRepeatUntil {
	return &InstanceInRepeatUntil{
	}
}

func (this InstanceInRepeatUntil) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceInRepeatUntil) Read(io *kaitai.Stream, parent kaitai.Struct, root *InstanceInRepeatUntil) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp1, err := this._io.ReadS2le()
		if err != nil {
			return err
		}
		_it := tmp1
		this.Entries = append(this.Entries, _it)
		tmp2, err := this.UntilVal()
		if err != nil {
			return err
		}
		if _it == tmp2 {
			break
		}
	}
	return err
}
func (this *InstanceInRepeatUntil) UntilVal() (v int16, err error) {
	if (this._f_untilVal) {
		return this.untilVal, nil
	}
	this._f_untilVal = true
	_pos, err := this._io.Pos()
	if err != nil {
		return 0, err
	}
	tmp3, err := this._io.Pos()
	if err != nil {
		return 0, err
	}
	_, err = this._io.Seek(int64(tmp3 + 12), io.SeekStart)
	if err != nil {
		return 0, err
	}
	tmp4, err := this._io.ReadS2le()
	if err != nil {
		return 0, err
	}
	this.untilVal = tmp4
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return 0, err
	}
	return this.untilVal, nil
}
