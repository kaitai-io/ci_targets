// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"golang.org/x/text/encoding/charmap"
)

type ExprBytesOps struct {
	One []byte
	_io *kaitai.Stream
	_root *ExprBytesOps
	_parent kaitai.Struct
	_f_oneFirst bool
	oneFirst uint8
	_f_oneLast bool
	oneLast uint8
	_f_oneMax bool
	oneMax uint8
	_f_oneMid bool
	oneMid uint8
	_f_oneMin bool
	oneMin uint8
	_f_oneSize bool
	oneSize int
	_f_oneToS bool
	oneToS string
	_f_two bool
	two []byte
	_f_twoFirst bool
	twoFirst uint8
	_f_twoLast bool
	twoLast uint8
	_f_twoMax bool
	twoMax uint8
	_f_twoMid bool
	twoMid uint8
	_f_twoMin bool
	twoMin uint8
	_f_twoSize bool
	twoSize int
	_f_twoToS bool
	twoToS string
}
func NewExprBytesOps() *ExprBytesOps {
	return &ExprBytesOps{
	}
}

func (this ExprBytesOps) IO_() *kaitai.Stream {
	return this._io
}

func (this *ExprBytesOps) Read(io *kaitai.Stream, parent kaitai.Struct, root *ExprBytesOps) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(3))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this.One = tmp1
	return err
}
func (this *ExprBytesOps) OneFirst() (v uint8, err error) {
	if (this._f_oneFirst) {
		return this.oneFirst, nil
	}
	this._f_oneFirst = true
	this.oneFirst = uint8(this.One[0])
	return this.oneFirst, nil
}
func (this *ExprBytesOps) OneLast() (v uint8, err error) {
	if (this._f_oneLast) {
		return this.oneLast, nil
	}
	this._f_oneLast = true
	tmp2 := this.One
	this.oneLast = uint8(tmp2[len(tmp2) - 1])
	return this.oneLast, nil
}
func (this *ExprBytesOps) OneMax() (v uint8, err error) {
	if (this._f_oneMax) {
		return this.oneMax, nil
	}
	this._f_oneMax = true
	tmp3 := this.One[0]
	for _, tmp4 := range this.One {
		if tmp3 < tmp4 {
			tmp3 = tmp4
		}
	}
	this.oneMax = uint8(tmp3)
	return this.oneMax, nil
}
func (this *ExprBytesOps) OneMid() (v uint8, err error) {
	if (this._f_oneMid) {
		return this.oneMid, nil
	}
	this._f_oneMid = true
	this.oneMid = uint8(this.One[1])
	return this.oneMid, nil
}
func (this *ExprBytesOps) OneMin() (v uint8, err error) {
	if (this._f_oneMin) {
		return this.oneMin, nil
	}
	this._f_oneMin = true
	tmp5 := this.One[0]
	for _, tmp6 := range this.One {
		if tmp5 > tmp6 {
			tmp5 = tmp6
		}
	}
	this.oneMin = uint8(tmp5)
	return this.oneMin, nil
}
func (this *ExprBytesOps) OneSize() (v int, err error) {
	if (this._f_oneSize) {
		return this.oneSize, nil
	}
	this._f_oneSize = true
	this.oneSize = int(len(this.One))
	return this.oneSize, nil
}
func (this *ExprBytesOps) OneToS() (v string, err error) {
	if (this._f_oneToS) {
		return this.oneToS, nil
	}
	this._f_oneToS = true
	tmp7, err := kaitai.BytesToStr(this.One, charmap.CodePage866.NewDecoder())
	if err != nil {
		return "", err
	}
	this.oneToS = string(tmp7)
	return this.oneToS, nil
}
func (this *ExprBytesOps) Two() (v []byte, err error) {
	if (this._f_two) {
		return this.two, nil
	}
	this._f_two = true
	this.two = []byte([]uint8{65, 255, 75})
	return this.two, nil
}
func (this *ExprBytesOps) TwoFirst() (v uint8, err error) {
	if (this._f_twoFirst) {
		return this.twoFirst, nil
	}
	this._f_twoFirst = true
	tmp8, err := this.Two()
	if err != nil {
		return 0, err
	}
	this.twoFirst = uint8(tmp8[0])
	return this.twoFirst, nil
}
func (this *ExprBytesOps) TwoLast() (v uint8, err error) {
	if (this._f_twoLast) {
		return this.twoLast, nil
	}
	this._f_twoLast = true
	tmp10, err := this.Two()
	if err != nil {
		return 0, err
	}
	tmp9 := tmp10
	this.twoLast = uint8(tmp9[len(tmp9) - 1])
	return this.twoLast, nil
}
func (this *ExprBytesOps) TwoMax() (v uint8, err error) {
	if (this._f_twoMax) {
		return this.twoMax, nil
	}
	this._f_twoMax = true
	tmp13, err := this.Two()
	if err != nil {
		return 0, err
	}
	tmp11 := tmp13[0]
	tmp14, err := this.Two()
	if err != nil {
		return 0, err
	}
	for _, tmp12 := range tmp14 {
		if tmp11 < tmp12 {
			tmp11 = tmp12
		}
	}
	this.twoMax = uint8(tmp11)
	return this.twoMax, nil
}
func (this *ExprBytesOps) TwoMid() (v uint8, err error) {
	if (this._f_twoMid) {
		return this.twoMid, nil
	}
	this._f_twoMid = true
	tmp15, err := this.Two()
	if err != nil {
		return 0, err
	}
	this.twoMid = uint8(tmp15[1])
	return this.twoMid, nil
}
func (this *ExprBytesOps) TwoMin() (v uint8, err error) {
	if (this._f_twoMin) {
		return this.twoMin, nil
	}
	this._f_twoMin = true
	tmp18, err := this.Two()
	if err != nil {
		return 0, err
	}
	tmp16 := tmp18[0]
	tmp19, err := this.Two()
	if err != nil {
		return 0, err
	}
	for _, tmp17 := range tmp19 {
		if tmp16 > tmp17 {
			tmp16 = tmp17
		}
	}
	this.twoMin = uint8(tmp16)
	return this.twoMin, nil
}
func (this *ExprBytesOps) TwoSize() (v int, err error) {
	if (this._f_twoSize) {
		return this.twoSize, nil
	}
	this._f_twoSize = true
	tmp20, err := this.Two()
	if err != nil {
		return 0, err
	}
	this.twoSize = int(len(tmp20))
	return this.twoSize, nil
}
func (this *ExprBytesOps) TwoToS() (v string, err error) {
	if (this._f_twoToS) {
		return this.twoToS, nil
	}
	this._f_twoToS = true
	tmp21, err := this.Two()
	if err != nil {
		return "", err
	}
	tmp22, err := kaitai.BytesToStr(tmp21, charmap.CodePage866.NewDecoder())
	if err != nil {
		return "", err
	}
	this.twoToS = string(tmp22)
	return this.twoToS, nil
}
