// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"io"
)

type ValidFailInst struct {
	A uint8
	_io *kaitai.Stream
	_root *ValidFailInst
	_parent kaitai.Struct
	_f_inst bool
	inst uint8
}
func NewValidFailInst() *ValidFailInst {
	return &ValidFailInst{
	}
}

func (this ValidFailInst) IO_() *kaitai.Stream {
	return this._io
}

func (this *ValidFailInst) Read(io *kaitai.Stream, parent kaitai.Struct, root *ValidFailInst) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this.Inst()
	if err != nil {
		return err
	}
	if (tmp1 >= 0) {
		tmp2, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.A = tmp2
	}
	return err
}
func (this *ValidFailInst) Inst() (v uint8, err error) {
	if (this._f_inst) {
		return this.inst, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return 0, err
	}
	_, err = this._io.Seek(int64(5), io.SeekStart)
	if err != nil {
		return 0, err
	}
	tmp3, err := this._io.ReadU1()
	if err != nil {
		return 0, err
	}
	this.inst = tmp3
	if !(this.inst == 80) {
		return 0, kaitai.NewValidationNotEqualError(80, this.inst, this._io, "/instances/inst")
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return 0, err
	}
	this._f_inst = true
	this._f_inst = true
	return this.inst, nil
}
