// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"io"
)

type InstanceIoUserEarlier struct {
	SizedA *InstanceIoUserEarlier_Slot
	SizedB *InstanceIoUserEarlier_Slot
	IntoB *InstanceIoUserEarlier_Foo
	IntoASkipped *InstanceIoUserEarlier_Foo
	IntoA *InstanceIoUserEarlier_Foo
	LastAccessor *InstanceIoUserEarlier_Baz
	_io *kaitai.Stream
	_root *InstanceIoUserEarlier
	_parent kaitai.Struct
	_raw_SizedA []byte
	_raw_SizedB []byte
	_f_aMid bool
	aMid uint16
	_f_bMid bool
	bMid uint16
}
func NewInstanceIoUserEarlier() *InstanceIoUserEarlier {
	return &InstanceIoUserEarlier{
	}
}

func (this InstanceIoUserEarlier) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceIoUserEarlier) Read(io *kaitai.Stream, parent kaitai.Struct, root *InstanceIoUserEarlier) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(6))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this._raw_SizedA = tmp1
	_io__raw_SizedA := kaitai.NewStream(bytes.NewReader(this._raw_SizedA))
	tmp2 := NewInstanceIoUserEarlier_Slot()
	err = tmp2.Read(_io__raw_SizedA, this, this._root)
	if err != nil {
		return err
	}
	this.SizedA = tmp2
	tmp3, err := this._io.ReadBytes(int(6))
	if err != nil {
		return err
	}
	tmp3 = tmp3
	this._raw_SizedB = tmp3
	_io__raw_SizedB := kaitai.NewStream(bytes.NewReader(this._raw_SizedB))
	tmp4 := NewInstanceIoUserEarlier_Slot()
	err = tmp4.Read(_io__raw_SizedB, this, this._root)
	if err != nil {
		return err
	}
	this.SizedB = tmp4
	tmp5 := NewInstanceIoUserEarlier_Foo()
	err = tmp5.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.IntoB = tmp5
	tmp6 := NewInstanceIoUserEarlier_Foo()
	err = tmp6.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.IntoASkipped = tmp6
	tmp7 := NewInstanceIoUserEarlier_Foo()
	err = tmp7.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.IntoA = tmp7
	tmp8 := NewInstanceIoUserEarlier_Baz()
	err = tmp8.Read(this._io, this, this._root)
	if err != nil {
		return err
	}
	this.LastAccessor = tmp8
	return err
}
func (this *InstanceIoUserEarlier) AMid() (v uint16, err error) {
	if (this._f_aMid) {
		return this.aMid, nil
	}
	this._f_aMid = true
	tmp9, err := this.IntoA.Inst()
	if err != nil {
		return 0, err
	}
	thisIo := tmp9._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return 0, err
	}
	_, err = thisIo.Seek(int64(1), io.SeekStart)
	if err != nil {
		return 0, err
	}
	tmp10, err := thisIo.ReadU2le()
	if err != nil {
		return 0, err
	}
	this.aMid = tmp10
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return 0, err
	}
	return this.aMid, nil
}
func (this *InstanceIoUserEarlier) BMid() (v uint16, err error) {
	if (this._f_bMid) {
		return this.bMid, nil
	}
	this._f_bMid = true
	tmp11, err := this.IntoB.Inst()
	if err != nil {
		return 0, err
	}
	thisIo := tmp11._io
	_pos, err := thisIo.Pos()
	if err != nil {
		return 0, err
	}
	_, err = thisIo.Seek(int64(1), io.SeekStart)
	if err != nil {
		return 0, err
	}
	tmp12, err := thisIo.ReadU2le()
	if err != nil {
		return 0, err
	}
	this.bMid = tmp12
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return 0, err
	}
	return this.bMid, nil
}
type InstanceIoUserEarlier_Baz struct {
	V uint8
	_io *kaitai.Stream
	_root *InstanceIoUserEarlier
	_parent *InstanceIoUserEarlier
}
func NewInstanceIoUserEarlier_Baz() *InstanceIoUserEarlier_Baz {
	return &InstanceIoUserEarlier_Baz{
	}
}

func (this InstanceIoUserEarlier_Baz) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceIoUserEarlier_Baz) Read(io *kaitai.Stream, parent *InstanceIoUserEarlier, root *InstanceIoUserEarlier) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp13, err := this._parent.IntoB.Inst()
	if err != nil {
		return err
	}
	tmp14, err := tmp13.Last()
	if err != nil {
		return err
	}
	if (tmp14 == 89) {
		tmp15, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.V = tmp15
	}
	return err
}
type InstanceIoUserEarlier_Foo struct {
	Indicator uint8
	Bar uint8
	_io *kaitai.Stream
	_root *InstanceIoUserEarlier
	_parent *InstanceIoUserEarlier
	_raw_inst []byte
	_f_inst bool
	inst *InstanceIoUserEarlier_Slot
}
func NewInstanceIoUserEarlier_Foo() *InstanceIoUserEarlier_Foo {
	return &InstanceIoUserEarlier_Foo{
	}
}

func (this InstanceIoUserEarlier_Foo) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceIoUserEarlier_Foo) Read(io *kaitai.Stream, parent *InstanceIoUserEarlier, root *InstanceIoUserEarlier) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp16, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Indicator = tmp16
	tmp17, err := this.Inst()
	if err != nil {
		return err
	}
	tmp18, err := tmp17._io.Size()
	if err != nil {
		return err
	}
	tmp19, err := this.Inst()
	if err != nil {
		return err
	}
	if ( ((tmp18 != 0) && (tmp19.Content == 102)) ) {
		tmp20, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Bar = tmp20
	}
	return err
}
func (this *InstanceIoUserEarlier_Foo) Inst() (v *InstanceIoUserEarlier_Slot, err error) {
	if (this._f_inst) {
		return this.inst, nil
	}
	this._f_inst = true
	var tmp21 *kaitai.Stream;
	if (this.Indicator == 202) {
		tmp21 = this._parent.SizedB._io
	} else {
		tmp21 = this._parent.SizedA._io
	}
	thisIo := tmp21
	_pos, err := thisIo.Pos()
	if err != nil {
		return nil, err
	}
	_, err = thisIo.Seek(int64(1), io.SeekStart)
	if err != nil {
		return nil, err
	}
	var tmp22 int8;
	tmp23, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	if (tmp23 != 14) {
		tmp22 = 4
	} else {
		tmp22 = 0
	}
	tmp24, err := thisIo.ReadBytes(int(tmp22))
	if err != nil {
		return nil, err
	}
	tmp24 = tmp24
	this._raw_inst = tmp24
	_io__raw_inst := kaitai.NewStream(bytes.NewReader(this._raw_inst))
	tmp25 := NewInstanceIoUserEarlier_Slot()
	err = tmp25.Read(_io__raw_inst, this, this._root)
	if err != nil {
		return nil, err
	}
	this.inst = tmp25
	_, err = thisIo.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.inst, nil
}
type InstanceIoUserEarlier_Slot struct {
	Content uint8
	_io *kaitai.Stream
	_root *InstanceIoUserEarlier
	_parent kaitai.Struct
	_f_last bool
	last uint8
}
func NewInstanceIoUserEarlier_Slot() *InstanceIoUserEarlier_Slot {
	return &InstanceIoUserEarlier_Slot{
	}
}

func (this InstanceIoUserEarlier_Slot) IO_() *kaitai.Stream {
	return this._io
}

func (this *InstanceIoUserEarlier_Slot) Read(io *kaitai.Stream, parent kaitai.Struct, root *InstanceIoUserEarlier) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp26, err := this._io.Size()
	if err != nil {
		return err
	}
	if (tmp26 != 0) {
		tmp27, err := this._io.ReadU1()
		if err != nil {
			return err
		}
		this.Content = tmp27
	}
	return err
}
func (this *InstanceIoUserEarlier_Slot) Last() (v uint8, err error) {
	if (this._f_last) {
		return this.last, nil
	}
	this._f_last = true
	tmp28, err := this._io.Size()
	if err != nil {
		return 0, err
	}
	if (tmp28 != 0) {
		_pos, err := this._io.Pos()
		if err != nil {
			return 0, err
		}
		tmp29, err := this._io.Size()
		if err != nil {
			return 0, err
		}
		_, err = this._io.Seek(int64(tmp29 - 1), io.SeekStart)
		if err != nil {
			return 0, err
		}
		tmp30, err := this._io.ReadU1()
		if err != nil {
			return 0, err
		}
		this.last = tmp30
		_, err = this._io.Seek(_pos, io.SeekStart)
		if err != nil {
			return 0, err
		}
	}
	return this.last, nil
}
