// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
	"golang.org/x/text/encoding/unicode"
)

type StrEncodingsUtf16 struct {
	LenBe uint32
	BeBomRemoved *StrEncodingsUtf16_StrBeBomRemoved
	LenLe uint32
	LeBomRemoved *StrEncodingsUtf16_StrLeBomRemoved
	_io *kaitai.Stream
	_root *StrEncodingsUtf16
	_parent kaitai.Struct
	_raw_BeBomRemoved []byte
	_raw_LeBomRemoved []byte
}
func NewStrEncodingsUtf16() *StrEncodingsUtf16 {
	return &StrEncodingsUtf16{
	}
}

func (this StrEncodingsUtf16) IO_() *kaitai.Stream {
	return this._io
}

func (this *StrEncodingsUtf16) Read(io *kaitai.Stream, parent kaitai.Struct, root *StrEncodingsUtf16) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenBe = uint32(tmp1)
	tmp2, err := this._io.ReadBytes(int(this.LenBe))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this._raw_BeBomRemoved = tmp2
	_io__raw_BeBomRemoved := kaitai.NewStream(bytes.NewReader(this._raw_BeBomRemoved))
	tmp3 := NewStrEncodingsUtf16_StrBeBomRemoved()
	err = tmp3.Read(_io__raw_BeBomRemoved, this, this._root)
	if err != nil {
		return err
	}
	this.BeBomRemoved = tmp3
	tmp4, err := this._io.ReadU4le()
	if err != nil {
		return err
	}
	this.LenLe = uint32(tmp4)
	tmp5, err := this._io.ReadBytes(int(this.LenLe))
	if err != nil {
		return err
	}
	tmp5 = tmp5
	this._raw_LeBomRemoved = tmp5
	_io__raw_LeBomRemoved := kaitai.NewStream(bytes.NewReader(this._raw_LeBomRemoved))
	tmp6 := NewStrEncodingsUtf16_StrLeBomRemoved()
	err = tmp6.Read(_io__raw_LeBomRemoved, this, this._root)
	if err != nil {
		return err
	}
	this.LeBomRemoved = tmp6
	return err
}
type StrEncodingsUtf16_StrBeBomRemoved struct {
	Bom uint16
	Str string
	_io *kaitai.Stream
	_root *StrEncodingsUtf16
	_parent *StrEncodingsUtf16
}
func NewStrEncodingsUtf16_StrBeBomRemoved() *StrEncodingsUtf16_StrBeBomRemoved {
	return &StrEncodingsUtf16_StrBeBomRemoved{
	}
}

func (this StrEncodingsUtf16_StrBeBomRemoved) IO_() *kaitai.Stream {
	return this._io
}

func (this *StrEncodingsUtf16_StrBeBomRemoved) Read(io *kaitai.Stream, parent *StrEncodingsUtf16, root *StrEncodingsUtf16) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp7, err := this._io.ReadU2be()
	if err != nil {
		return err
	}
	this.Bom = uint16(tmp7)
	tmp8, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp8 = tmp8
	tmp9, err := kaitai.BytesToStr(tmp8, unicode.UTF16(unicode.BigEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return err
	}
	this.Str = tmp9
	return err
}
type StrEncodingsUtf16_StrLeBomRemoved struct {
	Bom uint16
	Str string
	_io *kaitai.Stream
	_root *StrEncodingsUtf16
	_parent *StrEncodingsUtf16
}
func NewStrEncodingsUtf16_StrLeBomRemoved() *StrEncodingsUtf16_StrLeBomRemoved {
	return &StrEncodingsUtf16_StrLeBomRemoved{
	}
}

func (this StrEncodingsUtf16_StrLeBomRemoved) IO_() *kaitai.Stream {
	return this._io
}

func (this *StrEncodingsUtf16_StrLeBomRemoved) Read(io *kaitai.Stream, parent *StrEncodingsUtf16, root *StrEncodingsUtf16) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadU2le()
	if err != nil {
		return err
	}
	this.Bom = uint16(tmp10)
	tmp11, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp11 = tmp11
	tmp12, err := kaitai.BytesToStr(tmp11, unicode.UTF16(unicode.LittleEndian, unicode.IgnoreBOM).NewDecoder())
	if err != nil {
		return err
	}
	this.Str = tmp12
	return err
}
