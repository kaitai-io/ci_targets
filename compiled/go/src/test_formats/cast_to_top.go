// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"io"
)

type CastToTop struct {
	Code uint8
	_io *kaitai.Stream
	_root *CastToTop
	_parent kaitai.Struct
	_f_header bool
	header *CastToTop
	_f_headerCasted bool
	headerCasted *CastToTop
}
func NewCastToTop() *CastToTop {
	return &CastToTop{
	}
}

func (this CastToTop) IO_() *kaitai.Stream {
	return this._io
}

func (this *CastToTop) Read(io *kaitai.Stream, parent kaitai.Struct, root *CastToTop) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.Code = tmp1
	return err
}
func (this *CastToTop) Header() (v *CastToTop, err error) {
	if (this._f_header) {
		return this.header, nil
	}
	this._f_header = true
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(1), io.SeekStart)
	if err != nil {
		return nil, err
	}
	tmp2 := NewCastToTop()
	err = tmp2.Read(this._io, this, this._root)
	if err != nil {
		return nil, err
	}
	this.header = tmp2
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	return this.header, nil
}
func (this *CastToTop) HeaderCasted() (v *CastToTop, err error) {
	if (this._f_headerCasted) {
		return this.headerCasted, nil
	}
	this._f_headerCasted = true
	tmp3, err := this.Header()
	if err != nil {
		return nil, err
	}
	this.headerCasted = (*CastToTop)(tmp3)
	return this.headerCasted, nil
}
