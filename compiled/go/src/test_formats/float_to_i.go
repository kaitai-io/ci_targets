// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type FloatToI struct {
	SingleValue float32
	DoubleValue float64
	SingleValueIf float32
	DoubleValueIf float64
	_io *kaitai.Stream
	_root *FloatToI
	_parent kaitai.Struct
	_f_calcFloat1 bool
	calcFloat1 float64
	_f_calcFloat2 bool
	calcFloat2 float64
	_f_calcFloat3 bool
	calcFloat3 float64
	_f_calcFloat4 bool
	calcFloat4 float64
	_f_calcIf bool
	calcIf float64
	_f_calcIfI bool
	calcIfI int
	_f_doubleI bool
	doubleI int
	_f_doubleIfI bool
	doubleIfI int
	_f_float1I bool
	float1I int
	_f_float2I bool
	float2I int
	_f_float3I bool
	float3I int
	_f_float4I bool
	float4I int
	_f_singleI bool
	singleI int
	_f_singleIfI bool
	singleIfI int
}
func NewFloatToI() *FloatToI {
	return &FloatToI{
	}
}

func (this FloatToI) IO_() *kaitai.Stream {
	return this._io
}

func (this *FloatToI) Read(io *kaitai.Stream, parent kaitai.Struct, root *FloatToI) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadF4le()
	if err != nil {
		return err
	}
	this.SingleValue = float32(tmp1)
	tmp2, err := this._io.ReadF8le()
	if err != nil {
		return err
	}
	this.DoubleValue = float64(tmp2)
	if (true) {
		tmp3, err := this._io.ReadF4be()
		if err != nil {
			return err
		}
		this.SingleValueIf = float32(tmp3)
	}
	if (true) {
		tmp4, err := this._io.ReadF8be()
		if err != nil {
			return err
		}
		this.DoubleValueIf = float64(tmp4)
	}
	return err
}
func (this *FloatToI) CalcFloat1() (v float64, err error) {
	if (this._f_calcFloat1) {
		return this.calcFloat1, nil
	}
	this._f_calcFloat1 = true
	this.calcFloat1 = float64(1.234)
	return this.calcFloat1, nil
}
func (this *FloatToI) CalcFloat2() (v float64, err error) {
	if (this._f_calcFloat2) {
		return this.calcFloat2, nil
	}
	this._f_calcFloat2 = true
	this.calcFloat2 = float64(1.5)
	return this.calcFloat2, nil
}
func (this *FloatToI) CalcFloat3() (v float64, err error) {
	if (this._f_calcFloat3) {
		return this.calcFloat3, nil
	}
	this._f_calcFloat3 = true
	this.calcFloat3 = float64(1.9)
	return this.calcFloat3, nil
}
func (this *FloatToI) CalcFloat4() (v float64, err error) {
	if (this._f_calcFloat4) {
		return this.calcFloat4, nil
	}
	this._f_calcFloat4 = true
	this.calcFloat4 = float64(-2.7)
	return this.calcFloat4, nil
}
func (this *FloatToI) CalcIf() (v float64, err error) {
	if (this._f_calcIf) {
		return this.calcIf, nil
	}
	this._f_calcIf = true
	this.calcIf = float64(13.9)
	return this.calcIf, nil
}
func (this *FloatToI) CalcIfI() (v int, err error) {
	if (this._f_calcIfI) {
		return this.calcIfI, nil
	}
	this._f_calcIfI = true
	tmp5, err := this.CalcIf()
	if err != nil {
		return 0, err
	}
	this.calcIfI = int(int(tmp5))
	return this.calcIfI, nil
}
func (this *FloatToI) DoubleI() (v int, err error) {
	if (this._f_doubleI) {
		return this.doubleI, nil
	}
	this._f_doubleI = true
	this.doubleI = int(int(this.DoubleValue))
	return this.doubleI, nil
}
func (this *FloatToI) DoubleIfI() (v int, err error) {
	if (this._f_doubleIfI) {
		return this.doubleIfI, nil
	}
	this._f_doubleIfI = true
	this.doubleIfI = int(int(this.DoubleValueIf))
	return this.doubleIfI, nil
}
func (this *FloatToI) Float1I() (v int, err error) {
	if (this._f_float1I) {
		return this.float1I, nil
	}
	this._f_float1I = true
	tmp6, err := this.CalcFloat1()
	if err != nil {
		return 0, err
	}
	this.float1I = int(int(tmp6))
	return this.float1I, nil
}
func (this *FloatToI) Float2I() (v int, err error) {
	if (this._f_float2I) {
		return this.float2I, nil
	}
	this._f_float2I = true
	tmp7, err := this.CalcFloat2()
	if err != nil {
		return 0, err
	}
	this.float2I = int(int(tmp7))
	return this.float2I, nil
}
func (this *FloatToI) Float3I() (v int, err error) {
	if (this._f_float3I) {
		return this.float3I, nil
	}
	this._f_float3I = true
	tmp8, err := this.CalcFloat3()
	if err != nil {
		return 0, err
	}
	this.float3I = int(int(tmp8))
	return this.float3I, nil
}
func (this *FloatToI) Float4I() (v int, err error) {
	if (this._f_float4I) {
		return this.float4I, nil
	}
	this._f_float4I = true
	tmp9, err := this.CalcFloat4()
	if err != nil {
		return 0, err
	}
	this.float4I = int(int(tmp9))
	return this.float4I, nil
}
func (this *FloatToI) SingleI() (v int, err error) {
	if (this._f_singleI) {
		return this.singleI, nil
	}
	this._f_singleI = true
	this.singleI = int(int(this.SingleValue))
	return this.singleI, nil
}
func (this *FloatToI) SingleIfI() (v int, err error) {
	if (this._f_singleIfI) {
		return this.singleIfI, nil
	}
	this._f_singleIfI = true
	this.singleIfI = int(int(this.SingleValueIf))
	return this.singleIfI, nil
}
