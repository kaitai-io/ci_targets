// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"io"
)

type ValidFailRepeatInst struct {
	A []byte
	_io *kaitai.Stream
	_root *ValidFailRepeatInst
	_parent kaitai.Struct
	_f_inst bool
	inst []uint32
}
func NewValidFailRepeatInst() *ValidFailRepeatInst {
	return &ValidFailRepeatInst{
	}
}

func (this ValidFailRepeatInst) IO_() *kaitai.Stream {
	return this._io
}

func (this *ValidFailRepeatInst) Read(io *kaitai.Stream, parent kaitai.Struct, root *ValidFailRepeatInst) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this.Inst()
	if err != nil {
		return err
	}
	if (len(tmp1) == 0) {
		tmp2, err := this._io.ReadBytes(int(0))
		if err != nil {
			return err
		}
		tmp2 = tmp2
		this.A = tmp2
	}
	return err
}
func (this *ValidFailRepeatInst) Inst() (v []uint32, err error) {
	if (this._f_inst) {
		return this.inst, nil
	}
	_pos, err := this._io.Pos()
	if err != nil {
		return nil, err
	}
	_, err = this._io.Seek(int64(0), io.SeekStart)
	if err != nil {
		return nil, err
	}
	for i := 0;; i++ {
		tmp3, err := this._io.EOF()
		if err != nil {
			return nil, err
		}
		if tmp3 {
			break
		}
		tmp4, err := this._io.ReadU4be()
		if err != nil {
			return nil, err
		}
		this.inst = append(this.inst, tmp4)
		if !(this.inst[i] == 305419896) {
			return nil, kaitai.NewValidationNotEqualError(305419896, this.inst[i], this._io, "/instances/inst")
		}
	}
	_, err = this._io.Seek(_pos, io.SeekStart)
	if err != nil {
		return nil, err
	}
	this._f_inst = true
	this._f_inst = true
	return this.inst, nil
}
