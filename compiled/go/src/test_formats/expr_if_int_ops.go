// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type ExprIfIntOps struct {
	Key uint64
	Skip []byte
	Bytes []byte
	Items []int8
	_io *kaitai.Stream
	_root *ExprIfIntOps
	_parent kaitai.Struct
	_raw_Bytes []byte
	_f_bytesSubKey bool
	bytesSubKey uint8
	_f_itemsSubKey bool
	itemsSubKey int8
}
func NewExprIfIntOps() *ExprIfIntOps {
	return &ExprIfIntOps{
	}
}

func (this ExprIfIntOps) IO_() *kaitai.Stream {
	return this._io
}

func (this *ExprIfIntOps) Read(io *kaitai.Stream, parent kaitai.Struct, root *ExprIfIntOps) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	if (true) {
		tmp1, err := this._io.ReadU8le()
		if err != nil {
			return err
		}
		this.Key = uint64(tmp1)
	}
	tmp2, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp2 = tmp2
	this.Skip = tmp2
	tmp3, err := this._io.ReadBytes(int(8))
	if err != nil {
		return err
	}
	tmp3 = tmp3
	this._raw_Bytes = tmp3
	this.Bytes = kaitai.ProcessXOR(this._raw_Bytes, []byte{this.Key})
	for i := 0; i < int(4); i++ {
		_ = i
		tmp4, err := this._io.ReadS1()
		if err != nil {
			return err
		}
		this.Items = append(this.Items, tmp4)
	}
	return err
}
func (this *ExprIfIntOps) BytesSubKey() (v uint8, err error) {
	if (this._f_bytesSubKey) {
		return this.bytesSubKey, nil
	}
	this._f_bytesSubKey = true
	this.bytesSubKey = uint8(this.Bytes[this.Key])
	return this.bytesSubKey, nil
}
func (this *ExprIfIntOps) ItemsSubKey() (v int8, err error) {
	if (this._f_itemsSubKey) {
		return this.itemsSubKey, nil
	}
	this._f_itemsSubKey = true
	this.itemsSubKey = int8(this.Items[this.Key])
	return this.itemsSubKey, nil
}
