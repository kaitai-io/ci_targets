// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)

type StructPadTermEqual struct {
	S1 *StructPadTermEqual_BytesWrapper
	S2 *StructPadTermEqual_BytesWrapper
	S3 *StructPadTermEqual_BytesWrapper
	S4 *StructPadTermEqual_BytesWrapper
	_io *kaitai.Stream
	_root *StructPadTermEqual
	_parent kaitai.Struct
	_raw_S1 []byte
	_raw_S2 []byte
	_raw_S3 []byte
	_raw_S4 []byte
}
func NewStructPadTermEqual() *StructPadTermEqual {
	return &StructPadTermEqual{
	}
}

func (this StructPadTermEqual) IO_() *kaitai.Stream {
	return this._io
}

func (this *StructPadTermEqual) Read(io *kaitai.Stream, parent kaitai.Struct, root *StructPadTermEqual) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(20))
	if err != nil {
		return err
	}
	tmp1 = kaitai.BytesTerminate(kaitai.BytesStripRight(tmp1, 64), 64, false)
	this._raw_S1 = tmp1
	_io__raw_S1 := kaitai.NewStream(bytes.NewReader(this._raw_S1))
	tmp2 := NewStructPadTermEqual_BytesWrapper()
	err = tmp2.Read(_io__raw_S1, this, this._root)
	if err != nil {
		return err
	}
	this.S1 = tmp2
	tmp3, err := this._io.ReadBytes(int(20))
	if err != nil {
		return err
	}
	tmp3 = kaitai.BytesTerminate(kaitai.BytesStripRight(tmp3, 43), 64, true)
	this._raw_S2 = tmp3
	_io__raw_S2 := kaitai.NewStream(bytes.NewReader(this._raw_S2))
	tmp4 := NewStructPadTermEqual_BytesWrapper()
	err = tmp4.Read(_io__raw_S2, this, this._root)
	if err != nil {
		return err
	}
	this.S2 = tmp4
	tmp5, err := this._io.ReadBytes(int(20))
	if err != nil {
		return err
	}
	tmp5 = kaitai.BytesTerminate(kaitai.BytesStripRight(tmp5, 43), 43, false)
	this._raw_S3 = tmp5
	_io__raw_S3 := kaitai.NewStream(bytes.NewReader(this._raw_S3))
	tmp6 := NewStructPadTermEqual_BytesWrapper()
	err = tmp6.Read(_io__raw_S3, this, this._root)
	if err != nil {
		return err
	}
	this.S3 = tmp6
	tmp7, err := this._io.ReadBytes(int(20))
	if err != nil {
		return err
	}
	tmp7 = kaitai.BytesTerminate(kaitai.BytesStripRight(tmp7, 46), 46, true)
	this._raw_S4 = tmp7
	_io__raw_S4 := kaitai.NewStream(bytes.NewReader(this._raw_S4))
	tmp8 := NewStructPadTermEqual_BytesWrapper()
	err = tmp8.Read(_io__raw_S4, this, this._root)
	if err != nil {
		return err
	}
	this.S4 = tmp8
	return err
}
type StructPadTermEqual_BytesWrapper struct {
	Value []byte
	_io *kaitai.Stream
	_root *StructPadTermEqual
	_parent *StructPadTermEqual
}
func NewStructPadTermEqual_BytesWrapper() *StructPadTermEqual_BytesWrapper {
	return &StructPadTermEqual_BytesWrapper{
	}
}

func (this StructPadTermEqual_BytesWrapper) IO_() *kaitai.Stream {
	return this._io
}

func (this *StructPadTermEqual_BytesWrapper) Read(io *kaitai.Stream, parent *StructPadTermEqual, root *StructPadTermEqual) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp9, err := this._io.ReadBytesFull()
	if err != nil {
		return err
	}
	tmp9 = tmp9
	this.Value = tmp9
	return err
}
