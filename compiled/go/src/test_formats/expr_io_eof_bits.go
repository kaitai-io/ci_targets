// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import "github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"

type ExprIoEofBits struct {
	Foo uint64
	Bar uint64
	Baz uint64
	Align []byte
	Qux uint64
	_io *kaitai.Stream
	_root *ExprIoEofBits
	_parent kaitai.Struct
}
func NewExprIoEofBits() *ExprIoEofBits {
	return &ExprIoEofBits{
	}
}

func (this ExprIoEofBits) IO_() *kaitai.Stream {
	return this._io
}

func (this *ExprIoEofBits) Read(io *kaitai.Stream, parent kaitai.Struct, root *ExprIoEofBits) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBitsIntBe(20)
	if err != nil {
		return err
	}
	this.Foo = tmp1
	tmp2, err := this._io.EOF()
	if err != nil {
		return err
	}
	if (!(tmp2)) {
		tmp3, err := this._io.ReadBitsIntBe(4)
		if err != nil {
			return err
		}
		this.Bar = tmp3
	}
	tmp4, err := this._io.EOF()
	if err != nil {
		return err
	}
	if (!(tmp4)) {
		tmp5, err := this._io.ReadBitsIntBe(16)
		if err != nil {
			return err
		}
		this.Baz = tmp5
	}
	this._io.AlignToByte()
	tmp6, err := this._io.ReadBytes(int(0))
	if err != nil {
		return err
	}
	tmp6 = tmp6
	this.Align = tmp6
	tmp7, err := this._io.EOF()
	if err != nil {
		return err
	}
	if (!(tmp7)) {
		tmp8, err := this._io.ReadBitsIntBe(16)
		if err != nil {
			return err
		}
		this.Qux = tmp8
	}
	return err
}
