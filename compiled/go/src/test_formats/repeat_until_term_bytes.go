// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)

type RepeatUntilTermBytes struct {
	Records1 [][]byte
	Records2 [][]byte
	Records3 [][]byte
	_io *kaitai.Stream
	_root *RepeatUntilTermBytes
	_parent kaitai.Struct
}
func NewRepeatUntilTermBytes() *RepeatUntilTermBytes {
	return &RepeatUntilTermBytes{
	}
}

func (this RepeatUntilTermBytes) IO_() *kaitai.Stream {
	return this._io
}

func (this *RepeatUntilTermBytes) Read(io *kaitai.Stream, parent kaitai.Struct, root *RepeatUntilTermBytes) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	for i := 1;; i++ {
		tmp1, err := this._io.ReadBytesTerm(170, false, true, true)
		if err != nil {
			return err
		}
		_it := tmp1
		this.Records1 = append(this.Records1, _it)
		if len(_it) == 0 {
			break
		}
	}
	for i := 1;; i++ {
		tmp2, err := this._io.ReadBytesTerm(170, true, true, true)
		if err != nil {
			return err
		}
		_it := tmp2
		this.Records2 = append(this.Records2, _it)
		if (bytes.Compare(_it, []uint8{170}) != 0) {
			break
		}
	}
	for i := 1;; i++ {
		tmp3, err := this._io.ReadBytesTerm(85, false, false, true)
		if err != nil {
			return err
		}
		_it := tmp3
		this.Records3 = append(this.Records3, _it)
		tmp4 := this.Records1
		if bytes.Equal(_it, tmp4[len(tmp4) - 1]) {
			break
		}
	}
	return err
}
