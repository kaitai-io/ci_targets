// Code generated by kaitai-struct-compiler from a .ksy source file. DO NOT EDIT.

package test_formats

import (
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"bytes"
)

type TermBytes4 struct {
	S1 *TermBytes4_S1Type
	SkipTerm1 uint8
	S2 *TermBytes4_S2Type
	SkipTerm2 uint8
	S3 *TermBytes4_S3Type
	_io *kaitai.Stream
	_root *TermBytes4
	_parent kaitai.Struct
	_raw_S1 []byte
	_raw_S2 []byte
	_raw_S3 []byte
}
func NewTermBytes4() *TermBytes4 {
	return &TermBytes4{
	}
}

func (this TermBytes4) IO_() *kaitai.Stream {
	return this._io
}

func (this *TermBytes4) Read(io *kaitai.Stream, parent kaitai.Struct, root *TermBytes4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp1, err := this._io.ReadBytes(int(3))
	if err != nil {
		return err
	}
	tmp1 = tmp1
	this._raw_S1 = tmp1
	_io__raw_S1 := kaitai.NewStream(bytes.NewReader(this._raw_S1))
	tmp2 := NewTermBytes4_S1Type()
	err = tmp2.Read(_io__raw_S1, this, this._root)
	if err != nil {
		return err
	}
	this.S1 = tmp2
	tmp3, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SkipTerm1 = tmp3
	tmp4, err := this._io.ReadBytes(int(3))
	if err != nil {
		return err
	}
	tmp4 = tmp4
	this._raw_S2 = tmp4
	_io__raw_S2 := kaitai.NewStream(bytes.NewReader(this._raw_S2))
	tmp5 := NewTermBytes4_S2Type()
	err = tmp5.Read(_io__raw_S2, this, this._root)
	if err != nil {
		return err
	}
	this.S2 = tmp5
	tmp6, err := this._io.ReadU1()
	if err != nil {
		return err
	}
	this.SkipTerm2 = tmp6
	tmp7, err := this._io.ReadBytes(int(3))
	if err != nil {
		return err
	}
	tmp7 = tmp7
	this._raw_S3 = tmp7
	_io__raw_S3 := kaitai.NewStream(bytes.NewReader(this._raw_S3))
	tmp8 := NewTermBytes4_S3Type()
	err = tmp8.Read(_io__raw_S3, this, this._root)
	if err != nil {
		return err
	}
	this.S3 = tmp8
	return err
}
type TermBytes4_S1Type struct {
	Value []byte
	_io *kaitai.Stream
	_root *TermBytes4
	_parent *TermBytes4
}
func NewTermBytes4_S1Type() *TermBytes4_S1Type {
	return &TermBytes4_S1Type{
	}
}

func (this TermBytes4_S1Type) IO_() *kaitai.Stream {
	return this._io
}

func (this *TermBytes4_S1Type) Read(io *kaitai.Stream, parent *TermBytes4, root *TermBytes4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp9, err := this._io.ReadBytesTerm(124, false, true, false)
	if err != nil {
		return err
	}
	this.Value = tmp9
	return err
}
type TermBytes4_S2Type struct {
	Value []byte
	_io *kaitai.Stream
	_root *TermBytes4
	_parent *TermBytes4
}
func NewTermBytes4_S2Type() *TermBytes4_S2Type {
	return &TermBytes4_S2Type{
	}
}

func (this TermBytes4_S2Type) IO_() *kaitai.Stream {
	return this._io
}

func (this *TermBytes4_S2Type) Read(io *kaitai.Stream, parent *TermBytes4, root *TermBytes4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp10, err := this._io.ReadBytesTerm(124, false, false, false)
	if err != nil {
		return err
	}
	this.Value = tmp10
	return err
}
type TermBytes4_S3Type struct {
	Value []byte
	_io *kaitai.Stream
	_root *TermBytes4
	_parent *TermBytes4
}
func NewTermBytes4_S3Type() *TermBytes4_S3Type {
	return &TermBytes4_S3Type{
	}
}

func (this TermBytes4_S3Type) IO_() *kaitai.Stream {
	return this._io
}

func (this *TermBytes4_S3Type) Read(io *kaitai.Stream, parent *TermBytes4, root *TermBytes4) (err error) {
	this._io = io
	this._parent = parent
	this._root = root

	tmp11, err := this._io.ReadBytesTerm(64, true, true, false)
	if err != nil {
		return err
	}
	this.Value = tmp11
	return err
}
