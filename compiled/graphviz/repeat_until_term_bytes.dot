digraph {
	rankdir=LR;
	node [shape=plaintext];
	subgraph cluster__repeat_until_term_bytes {
		label="RepeatUntilTermBytes";
		graph[style=dotted];

		repeat_until_term_bytes__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
			<TR><TD PORT="records1_pos">0</TD><TD PORT="records1_size">...</TD><TD>term=170</TD><TD PORT="records1_type">records1</TD></TR>
			<TR><TD COLSPAN="4" PORT="records1__repeat">repeat until _.size == 0</TD></TR>
			<TR><TD PORT="records2_pos">...</TD><TD PORT="records2_size">...</TD><TD>term=170, include</TD><TD PORT="records2_type">records2</TD></TR>
			<TR><TD COLSPAN="4" PORT="records2__repeat">repeat until _ != [170].pack('C*')</TD></TR>
			<TR><TD PORT="records3_pos">...</TD><TD PORT="records3_size">...</TD><TD>term=85, don't consume</TD><TD PORT="records3_type">records3</TD></TR>
			<TR><TD COLSPAN="4" PORT="records3__repeat">repeat until _ == records1.last</TD></TR>
		</TABLE>>];
	}
	repeat_until_term_bytes__seq:records1_type -> repeat_until_term_bytes__seq:records3__repeat [color="#404040"];
}
