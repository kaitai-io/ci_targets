digraph {
	rankdir=LR;
	node [shape=plaintext];
	subgraph cluster__expr_bits {
		label="ExprBits";
		graph[style=dotted];

		expr_bits__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
			<TR><TD PORT="enum_seq_pos">0</TD><TD PORT="enum_seq_size">2b</TD><TD>b2beâ†’Items</TD><TD PORT="enum_seq_type">enum_seq</TD></TR>
			<TR><TD PORT="a_pos">0:2</TD><TD PORT="a_size">3b</TD><TD>b3be</TD><TD PORT="a_type">a</TD></TR>
			<TR><TD PORT="byte_size_pos">0:5</TD><TD PORT="byte_size_size">a</TD><TD></TD><TD PORT="byte_size_type">byte_size</TD></TR>
			<TR><TD PORT="repeat_expr_pos">...</TD><TD PORT="repeat_expr_size">1</TD><TD>s1</TD><TD PORT="repeat_expr_type">repeat_expr</TD></TR>
			<TR><TD COLSPAN="4" PORT="repeat_expr__repeat">repeat a times</TD></TR>
			<TR><TD PORT="switch_on_type_pos">...</TD><TD PORT="switch_on_type_size">...</TD><TD>switch (a)</TD><TD PORT="switch_on_type_type">switch_on_type</TD></TR>
			<TR><TD PORT="switch_on_endian_pos">...</TD><TD PORT="switch_on_endian_size">2</TD><TD>EndianSwitch</TD><TD PORT="switch_on_endian_type">switch_on_endian</TD></TR>
		</TABLE>>];
		expr_bits__inst__enum_inst [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
			<TR><TD>enum_inst</TD><TD>Kaitai::Struct::Stream::resolve_enum(ITEMS, a)</TD></TR>
		</TABLE>>];
		expr_bits__inst__inst_pos [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
			<TR><TD PORT="inst_pos_pos">a</TD><TD PORT="inst_pos_size">1</TD><TD>s1</TD><TD PORT="inst_pos_type">inst_pos</TD></TR>
		</TABLE>>];
expr_bits__seq_switch_on_type_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
</TABLE>>];
		subgraph cluster__endian_switch {
			label="ExprBits::EndianSwitch";
			graph[style=dotted];

			endian_switch__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="foo_pos">0</TD><TD PORT="foo_size">2</TD><TD>s2</TD><TD PORT="foo_type">foo</TD></TR>
			</TABLE>>];
		}
	}
	expr_bits__seq:a_type -> expr_bits__seq:byte_size_size [color="#404040"];
	expr_bits__seq:a_type -> expr_bits__seq:repeat_expr__repeat [color="#404040"];
	expr_bits__seq:switch_on_type_type -> expr_bits__seq_switch_on_type_switch [style=bold];
	expr_bits__seq:a_type -> expr_bits__seq:switch_on_type_type [color="#404040"];
	expr_bits__seq:switch_on_endian_type -> endian_switch__seq [style=bold];
	expr_bits__seq:a_type -> expr_bits__inst__enum_inst [color="#404040"];
	expr_bits__seq:a_type -> expr_bits__inst__inst_pos:inst_pos_pos [color="#404040"];
}
