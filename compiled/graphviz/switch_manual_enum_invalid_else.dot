digraph {
	rankdir=LR;
	node [shape=plaintext];
	subgraph cluster__switch_manual_enum_invalid_else {
		label="SwitchManualEnumInvalidElse";
		graph[style=dotted];

		switch_manual_enum_invalid_else__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
			<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
			<TR><TD PORT="opcodes_pos">0</TD><TD PORT="opcodes_size">...</TD><TD>Opcode</TD><TD PORT="opcodes_type">opcodes</TD></TR>
			<TR><TD COLSPAN="4" PORT="opcodes__repeat">repeat to end of stream</TD></TR>
		</TABLE>>];
		subgraph cluster__opcode {
			label="SwitchManualEnumInvalidElse::Opcode";
			graph[style=dotted];

			opcode__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
				<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				<TR><TD PORT="code_pos">0</TD><TD PORT="code_size">1</TD><TD>u1â†’CodeEnum</TD><TD PORT="code_type">code</TD></TR>
				<TR><TD PORT="body_pos">1</TD><TD PORT="body_size">...</TD><TD>switch (code)</TD><TD PORT="body_type">body</TD></TR>
			</TABLE>>];
opcode__seq_body_switch [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
	<TR><TD BGCOLOR="#F0F2E4">case</TD><TD BGCOLOR="#F0F2E4">type</TD></TR>
	<TR><TD>:code_enum_intval</TD><TD PORT="case0">Intval</TD></TR>
	<TR><TD>:code_enum_strval</TD><TD PORT="case1">Strval</TD></TR>
	<TR><TD>_</TD><TD PORT="case2">Defval</TD></TR>
</TABLE>>];
			subgraph cluster__defval {
				label="SwitchManualEnumInvalidElse::Opcode::Defval";
				graph[style=dotted];

				defval__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
					<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
				</TABLE>>];
				defval__inst__value [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
					<TR><TD BGCOLOR="#E0FFE0">id</TD><TD BGCOLOR="#E0FFE0">value</TD></TR>
					<TR><TD>value</TD><TD>123</TD></TR>
				</TABLE>>];
			}
			subgraph cluster__intval {
				label="SwitchManualEnumInvalidElse::Opcode::Intval";
				graph[style=dotted];

				intval__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
					<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
					<TR><TD PORT="value_pos">0</TD><TD PORT="value_size">1</TD><TD>u1</TD><TD PORT="value_type">value</TD></TR>
				</TABLE>>];
			}
			subgraph cluster__strval {
				label="SwitchManualEnumInvalidElse::Opcode::Strval";
				graph[style=dotted];

				strval__seq [label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0">
					<TR><TD BGCOLOR="#E0FFE0">pos</TD><TD BGCOLOR="#E0FFE0">size</TD><TD BGCOLOR="#E0FFE0">type</TD><TD BGCOLOR="#E0FFE0">id</TD></TR>
					<TR><TD PORT="value_pos">0</TD><TD PORT="value_size">...</TD><TD>str(term=0, ASCII)</TD><TD PORT="value_type">value</TD></TR>
				</TABLE>>];
			}
		}
	}
	switch_manual_enum_invalid_else__seq:opcodes_type -> opcode__seq [style=bold];
	opcode__seq:body_type -> opcode__seq_body_switch [style=bold];
	opcode__seq_body_switch:case0 -> intval__seq [style=bold];
	opcode__seq_body_switch:case1 -> strval__seq [style=bold];
	opcode__seq_body_switch:case2 -> defval__seq [style=bold];
	opcode__seq:code_type -> opcode__seq:body_type [color="#404040"];
}
